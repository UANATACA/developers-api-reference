swagger: '2.0'
info:
  version: '1.0'
  title: UANATACA SIGNCLOUD API DOCUMENTATION
  x-logo:
      url: https://raw.githubusercontent.com/UANATACA/SIGNCLOUD-REPO/main/img/signcloud-logo.png?token=ATF574Q6J3IHLUQAKRVUDVDALW6B6
      altText: Signcloud logo
  description: 
      $ref: ./signcloud_gui.md

host: cryptoapi.sandbox.uanataca.com
schemes: 
  - https

x-tagGroups:
  - name: API Reference
    tags:
      - Token
      - RSA

tags:
  - name: "Token"
    description: "
<html>
A virtual token is a cloud certificate associated to a SignCloud account.</br>
<table>
  <tr>
    <th>Method</th><th>Endpoint</th><th>Action</th>
  </tr>
  <tr>
    <td>POST</td><td><a href='#tag/Token/paths/~1api~1verify_pin/post'>/verify_pin</td><td>Verify if the virtual token PIN is valid</td>
  </tr>
  <tr>
    <td>POST</td><td><a href='#tag/Token/paths/~1api~1change_pin/post'>/change_pin</td><td>Change a virtual token PIN</td>
  </tr>
  <tr>
    <td>POST</td><td><a href='#tag/Token/paths/~1api~1unlock_pin/post'>/unlock_pin</td><td>Unlock the PIN of a locked virtual token</td>
  </tr>
  <tr>
    <td>POST</td><td><a href='#tag/Token/paths/~1api~1get_objects/post'>/get_objects</td><td>Retrieve the public key and certificate of a specified SignCloud account</td>
  </tr>
  <tr>
  <td>POST</td><td><a href='#tag/Token/paths/~1api~1token_info/post'>/token_info</td><td>Retrieve the token information of a specified SignCloud account</td>
  </tr>
</table>
<html>"

  - name: "RSA"
    description: "
<html>
Sign and decrypt Base64 buffers or get objects associated to a SignCloud account.</br>
<table>   
  <tr>
    <th>Method</th><th>Endpoint</th><th>Action</th>
  </tr>
  <tr>
    <td>POST</td><td><a href='#tag/RSA/paths/~1api~1generate_otp/post'>/generate_otp</td><td>Generates an otp for the specified digital identity</td>
  </tr> 
  <tr>
    <td>POST</td><td><a href='#tag/RSA/paths/~1api~1sign_rsa/post'>/sign_rsa</td><td>Sign a base64 encoded buffer</td>
  </tr>
  <tr>
    <td>POST</td><td><a href='#tag/RSA/paths/~1api~1decrypt_rsa/post'>/decrypt_rsa</td><td>Decrypt a base64 buffer</td>
  </tr>
</table> 
</html>"

###### Token ######
###############################################################################
paths:
  /api/verify_pin:
    post:
      summary: VERIFY PIN
      tags:
        - Token
      description: Verifies if the specified PIN is valid.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
      - in: "body"
        name: "body"
        schema:
          $ref: "#/definitions/Credentials"
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": true,
                    "error": null
                }
        401:
          description: Invalid Credentials
          schema:
            type: object
            properties:
              result:
                type: null
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Invalid credentials",
                      "code": 401,
                      "error_code": 1,
                      "details": ""
                    }
                }
        403:
          description: Invalid `username` or `pin` , User locked
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Token not found",
                      "code": 403,
                      "error_code": 2,
                      "details": ""
                    }
                } 
        412:
          description: Missing parameter in JSON object
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Missing parameter",
                      "code": 412,
                      "error_code": 6,
                      "details": "password"
                    }
                }
        420:
          description: Authentication refused (after 3 failed attempts)
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Authentication refused",
                      "code": 420,
                      "error_code": 5,
                      "details": "Last authentication attempt failed, next attempt will be accepted in 52 seconds"
                    }
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://signcloud.access.bit4id.org:13035/json/api/verify_pin \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "username": "1122338",
                      "password": "7T8xdGBN",
                      "pin": "w98nZZDR"
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://signcloud.access.bit4id.org:13035/json/api/verify_pin"

                  payload = {
                    "username": "1122338",
                    "password": "7T8xdGBN",
                    "pin": "w98nZZDR"
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.post(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://signcloud.access.bit4id.org:13035/json/api/verify_pin',
                    {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        username: '1122338',
                        password: '7T8xdGBN',
                        pin: 'w98nZZDR'
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;

                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      using (var client = new HttpClient())
                      {
                        JObject json = JObject.Parse(@"{
                          username: '1122338',
                          password: '7T8xdGBN',
                          pin: 'w98nZZDR'
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PostAsync("https://signcloud.access.bit4id.org:13035/json/api/verify_pin", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }        
  #############
  /api/change_pin:
    post:
      summary: CHANGE PIN
      tags:
        - Token
      description: Changes a token PIN.
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      - in: "body"
        name: "body"
        schema:
          $ref: "#/definitions/Credentials_changepin"
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": true,
                    "error": null
                }
        401:
          description: Invalid password
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Invalid credentials",
                      "code": 401,
                      "error_code": 1,
                      "details": ""
                    }
                } 
        403:
          description: Invalid `username` or `pin` , User locked
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Token not found",
                      "code": 403,
                      "error_code": 2,
                      "details": ""
                    }
                } 
        412:
          description: Missing parameter in JSON object
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Missing parameter",
                      "code": 412,
                      "error_code": 6,
                      "details": "password"
                    }
                }
        420:
          description: Authentication refused (after 3 failed attempts)
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Authentication refused",
                      "code": 420,
                      "error_code": 5,
                      "details": "Last authentication attempt failed, next attempt will be accepted in 52 seconds"
                    }
                }
        500:
          description: Internal Server Error
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Internal Server Error",
                      "code": 500,
                      "error_code": 100,
                      "details": "'NEWPIN' must contain at least 2 numbers"
                    }
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://signcloud.access.bit4id.org:13035/json/api/change_pin \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "username": "1122338",
                      "password": "7T8xdGBN",
                      "pin": "w98nZZDR",
                      "newpin": "newpin12"
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://signcloud.access.bit4id.org:13035/json/api/change_pin"

                  payload = {
                    "username": "1122338",
                    "password": "7T8xdGBN",
                    "pin": "w98nZZDR",
                    "newpin": "newpin12"
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.post(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://signcloud.access.bit4id.org:13035/json/api/change_pin',
                    {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        username: '1122338',
                        password: '7T8xdGBN',
                        pin: 'w98nZZDR',
                        newpin: 'newpin12'
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;

                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      using (var client = new HttpClient())
                      {
                        JObject json = JObject.Parse(@"{
                          username: '1122338',
                          password: '7T8xdGBN',
                          pin: 'w98nZZDR',
                          newpin: 'newpin12'
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PostAsync("https://signcloud.access.bit4id.org:13035/json/api/change_pin", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }                  
  #############
  /api/unlock_pin:
    post:
      summary: UNLOCK PIN
      tags:
        - Token
      description: Unlocks the PIN of a locked token.
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      - in: "body"
        name: "body"
        schema:
          $ref: "#/definitions/Credentials_unlockpin"
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": true,
                    "error": null
                }
        401:
          description: Invalid password
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Invalid credentials",
                      "code": 401,
                      "error_code": 1,
                      "details": ""
                    }
                }
        403:
          description: Invalid `username` or `puk`
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Token not found",
                      "code": 403,
                      "error_code": 2,
                      "details": ""
                    }
                }
        412:
          description: Missing parameter in JSON object
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Missing parameter",
                      "code": 412,
                      "error_code": 6,
                      "details": "password"
                    }
                }
        420:
          description: Authentication refused (after 3 failed attempts)
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Authentication refused",
                      "code": 420,
                      "error_code": 5,
                      "details": "Last authentication attempt failed, next attempt will be accepted in 52 seconds"
                    }
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://signcloud.access.bit4id.org:13035/json/api/unlock_pin \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "username": "1122338",
                      "password": "7T8xdGBN",
                      "newpin": "w98nZZDR",
                      "puk": "b5UGHR2u"
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://signcloud.access.bit4id.org:13035/json/api/unlock_pin"

                  payload = {
                    "username": "1122338",
                    "password": "7T8xdGBN",
                    "newpin": "w98nZZDR",
                    "puk": "b5UGHR2u"
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.post(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://signcloud.access.bit4id.org:13035/json/api/unlock_pin',
                    {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        username: '1122338',
                        password: '7T8xdGBN',
                        newpin: 'w98nZZDR',
                        puk: 'b5UGHR2u'
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;

                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      using (var client = new HttpClient())
                      {
                        JObject json = JObject.Parse(@"{
                          username: '1122338',
                          password: '7T8xdGBN',
                          newpin: 'string',
                          puk: 'b5UGHR2u'
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PostAsync("https://signcloud.access.bit4id.org:13035/json/api/unlock_pin", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
###### TOKEN API ######
###############################################################################
  /api/get_objects:
    post:
      summary: GET OBJECTS
      tags:
        - Token
      description: Retrieves the public key or the certificate of a specified SignCloud account.
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      - in: "body"
        name: "body"
        description: JSON object that includes the user credentials for verification.
        schema:
          $ref: "#/definitions/Credentials_getobjects"
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              result:
                description: The result JSON object
                properties:
                  data: 
                    type: string
                  type:
                    type: number
                  ckaid:
                    type: string
                  label:
                    type: string
              error:
                type: boolean
                description: The request error key
          examples:
            application/json:
              {
                  "result": [
                      {
                          "data": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArG9kf4t5lIRC96PfuhKGi0CmdCqUxYb3VstbwkvVdmSUBWm+OV1RzhSAR7BxP67e+5VsqKRN+PD273gA676xHIP1VDvrLmX3eOGqq6h3hpU+mQHQ8hzhONyv/uEDmF4ooJXh+zEjfGce/8K42VcMHmMrqj2GRQoyRmX02m95XiY8VMP7mqp5kmDHGQkWsDtJBKhXqMac4GbO8+yiw6MwR2xGhESxS09aaRjqp4bjvRMfFuNSZQL7/2jNufGbU+CBpnxrOoN+AP+vPOIhgXPlEC8Qk6POdKG9FHKLXVtz4DvPeHKyQ+MVbErjVyhK8fTOaR3BnZ+0bGHFf2AovRVfUwIDAQAB",
                          "type": 3,
                          "ckaid": "DS0",
                          "label": "DS0_PublicKey"
                      },
                      {
                         "data": "MIIIATCCBemgAwIBAgIIKKcLpQYyugcwDQYJKoZIhvcNAQELBQAwgb0xCzAJBgNVBAYTAkVTMUQwQgYDVQQHDDtCYXJjZWxvbmEgKHNlZSBjdXJyZW50IGFkZHJlc3MgYXQgd3d3LnVhbmF0YWNhLmNvbS9hZGRyZXNzKTEWMBQGA1UECgwNVUFOQVRBQ0EgUy5BLjEUMBIGA1UECwwLQUMtVUFOQVRBQ0ExIDAeBgNVBAMMF1VBTkFUQUNBIENBMSBERVZFTCAyMDE2MRgwFgYDVQRhDA9WQVRFUy1BNjY3MjE0OTkwHhcNMjAxMjAxMTQ1MjAwWhcNMjIxMjAxMTQ1MjAwWjCBpTELMAkGA1UEBhMCRVMxLDAqBgNVBAsMI0pvbmFzIEdvbnphbGV6IERQUjp3d3cudWFuYXRhY2EuY29tMRswGQYDVQQEDBJQcsOhY3RpY2FzIFBydWViYXMxDjAMBgNVBCoMBUpvbmFzMRgwFgYDVQQFEw9JRENFUy1ZMzY0Njk1N0UxITAfBgNVBAMMGEpvbmFzIFByw6FjdGljYXMgUHJ1ZWJhczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKxvZH+LeZSEQvej37oShotApnQqlMWG91bLW8JL1XZklAVpvjldUc4UgEewcT+u3vuVbKikTfjw9u94AOu+sRyD9VQ76y5l93jhqquod4aVPpkB0PIc4Tjcr/7hA5heKKCV4fsxI3xnHv/CuNlXDB5jK6o9hkUKMkZl9NpveV4mPFTD+5qqeZJgxxkJFrA7SQSoV6jGnOBmzvPsosOjMEdsRoREsUtPWmkY6qeG470THxbjUmUC+/9ozbnxm1PggaZ8azqDfgD/rzziIYFz5RAvEJOjznShvRRyi11bc+A7z3hyskPjFWxK41coSvH0zmkdwZ2ftGxhxX9gKL0VX1MCAwEAAaOCAxkwggMVMIHXBggrBgEFBQcBAQSByjCBxzBVBggrBgEFBQcwAoZJaHR0cDovL3d3dy51YW5hdGFjYS5jb20vcHVibGljL2Rvd25sb2FkL3RzcF9jZXJ0aWZpY2F0ZXMvc3Vib3JkaW5hdGUxLmNydDA2BggrBgEFBQcwAYYqaHR0cDovL29jc3AxLnVhbmF0YWNhLmNvbS9wdWJsaWMvcGtpL29jc3AvMDYGCCsGAQUFBzABhipodHRwOi8vb2NzcDIudWFuYXRhY2EuY29tL3B1YmxpYy9wa2kvb2NzcC8wHQYDVR0OBBYEFLn/HGQM26X2iyrzB+XqvAb3/YjAMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUysyKpc+kjCJa1vuX90+0Tv3V764wVQYIKwYBBQUHAQMESTBHMAgGBgQAjkYBATALBgYEAI5GAQMCAQ8wLgYGBACORgEFDCRodHRwczovL3d3dy51YW5hdGFjYS5jb20vcHVibGljL2Nwcy8wga4GA1UdIASBpjCBozBBBgsrBgEEAYLxNgEUBTAyMDAGCCsGAQUFBwIBFiRodHRwczovL3d3dy51YW5hdGFjYS5jb20vcHVibGljL2Nwcy8wXgYLKwYBBAGC8TYBAQUwTzBNBggrBgEFBQcCAjBBDD9DZXJ0aWZpY2FkbyBjdWFsaWZpY2FkbyBkZSBQZXJzb25hIEbDrXNpY2EgZW4gSFNNIGNlbnRyYWxpemFkby4wgY8GA1UdHwSBhzCBhDBAoD6gPIY6aHR0cDovL2NybDEudWFuYXRhY2EuY29tL3B1YmxpYy9wa2kvY3JsL0NBMXN1Ym9yZGluYWRhLmNybDBAoD6gPIY6aHR0cDovL2NybDIudWFuYXRhY2EuY29tL3B1YmxpYy9wa2kvY3JsL0NBMXN1Ym9yZGluYWRhLmNybDAOBgNVHQ8BAf8EBAMCBeAwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMEMCIGA1UdEQQbMBmBF2pvbmFzaXNhaWFzOTlAZ21haWwuY29tMA0GCSqGSIb3DQEBCwUAA4ICAQAeuuN7s8OK8YFaAkRjQY9RoX4onQmxBceLiaKjvXs4Dr/p1sHGyN3nutIMa4JhdPC8wNEy1t3O3nDEfsLdF1LyxSe0CZuHnkMlsr2V8uZXjA4xwwUMEBYwEsGapggN0DuZzDKRC6tkD2q1GkiabfH5UPJs4L1k/zcay549CwZ75K2Me/dommlVIN639oiPw55tByCGH/RtR8CO60PqbiKbW2oPdeIOIfVeaaQDFzTNOoFRT/8snzklm8oGSFjf038vUnNh4VL5wQx2xwe53xKTr9kJar51+u3qq+n6vq4iv1VqUqvvybE3UDr+lnJVjWMNXURl0ZfeVslAHFwQKfO8jGjtX5uq4iRGjcAehs8dgtQ4be+zwoP0XVG/LP/+k+uBmDzGiSOozbrHSkGRkJ+pAU9jUroivk3WeUhGgTM7+e9QCGhcK3eUxR6KSY8JkF2kHd5/Vi258NR2AHyYlRgyg/WyJ0/9rT1Mp57uIOh4N7fLG9qMaBGAlI8Kb5JusfI5nCEoRfyGpQTqOX4jI5glT5UNpdmW/4GSXVYIuA/m0NOqnjD6e4ZOmF/O1PlOSIM4pc4u5aWK79CpqPgyR9fMSXheZoFMrfBX5HTQV8JfWWiO8nXDqFT/HwPdTTyLVgKZYv2hWYL91xMCAePaC24QYgXO+g55r7WB6bPRO3hkAw==", 
                          "type": 4,
                          "ckaid": "DS0",
                          "label": "DS0_Certificate"
                      }                    
                  ],
                  "error": null
              }
        401:
          description: Invalid password
          schema:
            type: object
            properties:
              result:
                type: null
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Invalid credentials",
                      "code": 401,
                      "error_code": 1,
                      "details": ""
                    }
                }
        403:
          description: Invalid `username` , User locked
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Token locked",
                      "code": 403,
                      "error_code": 2,
                      "details": ""
                    }
                } 
        412:
          description: Missing parameter in JSON object
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Missing parameter",
                      "code": 412,
                      "error_code": 6,
                      "details": "password"
                    }
                }
        420:
          description: Authentication refused (after 3 failed attempts)
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Authentication refused",
                      "code": 420,
                      "error_code": 5,
                      "details": "Last authentication attempt failed, next attempt will be accepted in 52 seconds"
                    }
                }
        500:
          description: Internal Server Error. `identifier` or `mechanism` not supported
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Internal Server Error",
                      "code": 500,
                      "error_code": 100,
                      "details": "Mechanism xxxyyy is not supported"
                    }
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://signcloud.access.bit4id.org:13035/json/api/get_objects \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "username": "1122338",
                      "password": "7T8xdGBN",
                      "type": "null",
                      "identifier": "DS0"
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://signcloud.access.bit4id.org:13035/json/api/get_objects"

                  payload = {
                    "username": "1122338",
                    "password": "7T8xdGBN",
                    "type": "null",
                    "identifier": "DS0"
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.post(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://signcloud.access.bit4id.org:13035/json/api/get_objects',
                    {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        username: '1122338',
                        password: '7T8xdGBN',
                        type: 'null',
                        identifier: 'DS0'
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;

                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      using (var client = new HttpClient())
                      {
                        JObject json = JObject.Parse(@"{
                          username: '1122338',
                          password: '7T8xdGBN',
                          type: 'null',
                          identifier: 'DS0'
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PostAsync("https://signcloud.access.bit4id.org:13035/json/api/get_objects", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }


###############################################################################
  /api/token_info:
    post:
      summary: GET TOKEN INFO
      tags:
        - Token
      description: Retrieves the token information of a specified SignCloud account. See description of succesful response for more details.
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      - in: "body"
        name: "body"
        description: JSON object that includes the user credentials for verification.
        schema:
          $ref: "#/definitions/Credentials_tokeninfo"
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              result:
                description: The result JSON object
                properties:
                  puk_counter: 
                    type: number
                    description: Remaining attempts before PUK lock
                  label:
                    type: string
                    description: Identifying label
                  qualified:
                    type: string
                    description: Signature level. Qualified signature level requires an OTP code.
                  pin_counter:
                    type: number
                    description: Remaining attempts before PIN lock
                  identifier:
                    type: string
                    description: SignCloud account username
                  webunlock:
                    type: boolean
                    description: Capability to unlock the token through web recovery
              error:
                type: boolean
                description: The request error key
          examples:
            application/json:
              {
                "result": {
                    "puk_counter": 3,
                    "label": "xxxxxx_Label",
                    "qualified": true,
                    "pin_counter": 3,
                    "identifier": "xxxxxx",
                    "webunlock": true
                },
                "error": null
              }
        401:
          description: Invalid Credentials
          schema: 
            type: object
            properties: 
              result:
                type: boolean
                description: The request result value
              error:
                description: The error JSON object
                properties: 
                  msg:
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
              {
                "result": null,
                "error": {
                  "msg": "Invalid credentials",
                  "code": 401,
                  "error_code": 1,
                  "details": ""
                }
              }
      x-codeSamples:
                - lang: 'curl'
                  source: |
                          curl -i -X POST \
                            https://signcloud.access.bit4id.org:13035/json/api/token_info \
                            -H 'Content-Type: application/json' \
                            -d '{
                              "username": "1122338",
                              "password": "7T8xdGBN"
                            }'
                - lang: 'Python'
                  source: |
                          import requests
        
                          url = "https://signcloud.access.bit4id.org:13035/json/api/token_info"
        
                          payload = {
                            "username": "1122338",
                            "password": "7T8xdGBN"
                          }
        
                          headers = {"Content-Type": "application/json"}
        
                          response = requests.post(url, json=payload, headers=headers)
        
                          data = response.json()
                          print(data)
                - lang: 'Node.js'
                  source: |
                          import fetch from "node-fetch";
        
                          const resp = await fetch(
                            'https://signcloud.access.bit4id.org:13035/json/api/token_info',
                            {
                              method: 'POST',
                              headers: {
                                'Content-Type': 'application/json'
                              },
                              body: JSON.stringify({
                                username: '1122338',
                                password: '7T8xdGBN'
                              })
                            }
                          );
        
                          const data = await resp.json();
                          console.log(data);
                - lang: 'C#'
                  source: |
                          using System;
                          using System.Net.Http;
                          using System.Threading.Tasks;
                          using System.Text;
                          using Newtonsoft.Json.Linq;
        
                          public class Program
                          {
                            public static async Task Main(string[] args)
                            {
                              using (var client = new HttpClient())
                              {
                                JObject json = JObject.Parse(@"{
                                  username: '1122338',
                                  password: '7T8xdGBN'
                                }");
                                var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                                var request = await client.PostAsync("https://signcloud.access.bit4id.org:13035/json/api/token_info", postData);
                                var response = await request.Content.ReadAsStringAsync();
        
                                Console.WriteLine(response);
                              }
                            }
                          }
    
                  
#############
  /api/generate_otp:
    post: 
      summary: OTP
      tags:
        - RSA
      description: "Generates an otp for the specified digital identity.</br>
                    <html><blockquote style='background-color:#faf3ac; border-color:#DFDFDF; color:#3b3b3b;'><b>⚠This method is only required and available for specific digital identities</b></blockquote></html>"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      - in: "body"
        name: "body"
        description: JSON object that includes the user credentials for verification.
        schema:
          $ref: "#/definitions/Credentials_generateotp"
      responses:
        200:
          description: Successful Response
          examples:
            application/json:
              {
                "result": {
                  "identifier": "",
                  "additional_data": {
                  "max_uses": 10000,
                  "qualified": true,
                  "number": "",
                  "webunlock": true
                                      }
                  },
                "error": null
              }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    'https://signcloud.access.bit4id.org:13035/json/api/generate_otp' \
                    -H 'Content-Type: application/json' \
                    -F password=7T8xdGBN \
                    -F username=1122338 \
                    -F uses=10
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://signcloud.access.bit4id.org:13035/json/api/generate_otp"

                  payload = {
                            'username': '1122338',
                            'password': '7T8xdGBN',
                            'uses': 10
                            }

                  headers = {
                  'Content-Type': 'application/json'
                  }

                  response = requests.request("POST", url, headers=headers, data=payload)

                  print(response.text) 
#############
  /api/sign_rsa:
    post:
      summary: SIGN RSA
      tags:
        - RSA
      description: "Signs a base64 encoded buffer."
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      - in: "body"
        name: "body"
        description: JSON object that includes the user credentials for verification.
        schema:
          $ref: "#/definitions/Credentials_signrsa"
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": "iaJp+O8CxSOPlPL4Eg4KBnlXDG+6g16wgp4ihVLIu3tJDIWFUFUHNgF/8+R1x3TJg4dCpKk6h3Tf+PapnJjGBgxnLeIA5nvdvKFu99Zlm0mS0Y6yjy6wMCEocWFtV+UBVpgXeDHae3XuiSHFu8c9TM7zdlnfmPRkZNHlb+HgafczuMAOfVsPepYsI4qlFIjS76v/6IczeGHV/aeSOa24jyNQsuVgBmbhHqqB8XQS9hHf+rQhvAgFv1o35HRgVDoNr93lkTflT88cjY+ip8ndc2QyY2nuuZmE4OR0ElGUV+9h+6/HMpl0hkHTX/NGRSdipHnZ93bNAahRRVK4okQLRQ==",
                    "error": null
                }        
        401:
          description: Invalid password
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Invalid credentials",
                      "code": 401,
                      "error_code": 1,
                      "details": ""
                    }
                }
        403:
          description: Invalid `username` or `pin` , User locked
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Token not found",
                      "code": 403,
                      "error_code": 2,
                      "details": ""
                    }
                } 
        412:
          description: Missing parameter in JSON object
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Missing parameter",
                      "code": 412,
                      "error_code": 6,
                      "details": "billing_username"
                    }
                }
        420:
          description: Authentication refused (after 3 failed attempts)
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Authentication refused",
                      "code": 420,
                      "error_code": 5,
                      "details": "Last authentication attempt failed, next attempt will be accepted in 52 seconds"
                    }
                }
        500:
          description: "Internal Server Error. Wrong `identifier` or `mechanism` or `billing_username` or `billing_password`"
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Internal Server Error",
                      "code": 500,
                      "error_code": 100,
                      "details": "Invalid billing credentials"
                    }
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://signcloud.access.bit4id.org:13035/json/api/sign_rsa \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "username": "1122338",
                      "password": "7T8xdGBN",
                      "pin": "w98nZZDR",
                      "identifier": "DS0",
                      "mechanism": "RSARAW",
                      "plaintext": "T3V0IG1lc3NhZ2UK",
                      "billing_username": "billing_user@domain",
                      "billing_password": "z5qNqkfB",
                      "otp": "123456"
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://signcloud.access.bit4id.org:13035/json/api/sign_rsa"

                  payload = {
                    "username": "1122338",
                    "password": "7T8xdGBN",
                    "pin": "w98nZZDR",
                    "identifier": "DS0",
                    "mechanism": "RSARAW",
                    "plaintext": "T3V0IG1lc3NhZ2UK",
                    "billing_username": "billing_user@domain",
                    "billing_password": "z5qNqkfB",
                    "otp": "123456"
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.post(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://signcloud.access.bit4id.org:13035/json/api/sign_rsa',
                    {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        username: '1122338',
                        password: '7T8xdGBN',
                        pin: 'w98nZZDR',
                        identifier: 'DS0',
                        mechanism: 'RSARAW',
                        plaintext: 'T3V0IG1lc3NhZ2UK',
                        billing_username: 'billing_user@domain',
                        billing_password: 'z5qNqkfB',
                        otp: '123456'
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;

                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      using (var client = new HttpClient())
                      {
                        JObject json = JObject.Parse(@"{
                          username: '1122338',
                          password: '7T8xdGBN',
                          pin: 'w98nZZDR',
                          identifier: 'DS0',
                          mechanism: 'RSARAW',
                          plaintext: 'T3V0IG1lc3NhZ2UK',
                          billing_username: 'billing_user@domain',
                          billing_password: 'z5qNqkfB',
                          otp: '123456'
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PostAsync("https://signcloud.access.bit4id.org:13035/json/api/sign_rsa", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
#############
  /api/decrypt_rsa:
    post:
      summary: DECRYPT RSA
      tags:
        - RSA
      description: Decrypts a base64 buffer.
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      - in: "body"
        name: "body"
        description: JSON object that includes the user credentials for verification.
        schema:
          $ref: "#/definitions/Credentials_decryptrsa"
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": "Decrypted output",
                    "error": null
                }  
        401:
          description: Invalid password
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Invalid credentials",
                      "code": 401,
                      "error_code": 1,
                      "details": ""
                    }
                }
        403:
          description: User locked or Invalid `username` or `pin` 
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Invalid Pin",
                      "code": 403,
                      "error_code": 2,
                      "details": ""
                    }
                } 
        420:
          description: Authentication refused (after 3 failed attempts)
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Authentication refused",
                      "code": 420,
                      "error_code": 5,
                      "details": "Last authentication attempt failed, next attempt will be accepted in 52 seconds"
                    }
                }
        500:
          description: "Internal Server Error"
          schema:
            type: object
            properties:
              result:
                type: boolean
                description: The request result key
              error:
                description: The error JSON object
                properties:
                  msg: 
                    type: string
                  code:
                    type: number
                  error_code:
                    type: number
                  details:
                    type: string
          examples:
            application/json:
                {
                    "result": null,
                    "error": {
                      "msg": "Internal Server Error",
                      "code": 500,
                      "error_code": 100,
                      "details": "DecryptFailed"
                    }
                } 
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://signcloud.access.bit4id.org:13035/json/api/decrypt_rsa \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "username": "1122338",
                      "password": "7T8xdGBN",
                      "pin": "w98nZZDR",
                      "identifier": "DS0",
                      "ciphertext": "T3V0IG1lc3NhZ2UK"
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://signcloud.access.bit4id.org:13035/json/api/decrypt_rsa"

                  payload = {
                    "username": "1122338",
                    "password": "7T8xdGBN",
                    "pin": "w98nZZDR",
                    "identifier": "DS0"
                    "ciphertext": "T3V0IG1lc3NhZ2UK"
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.post(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://signcloud.access.bit4id.org:13035/json/api/decrypt_rsa',
                    {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        username: '1122338',
                        password: '7T8xdGBN',
                        pin: 'w98nZZDR',
                        identifier: 'DS0',
                        ciphertext: 'T3V0IG1lc3NhZ2UK'
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;

                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      using (var client = new HttpClient())
                      {
                        JObject json = JObject.Parse(@"{
                          username: '1122338',
                          password: '7T8xdGBN',
                          pin: 'w98nZZDR',
                          identifier: 'DS0',
                          ciphertext: 'T3V0IG1lc3NhZ2UK'
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PostAsync("https://signcloud.access.bit4id.org:13035/json/api/decrypt_rsa", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
definitions:
  Credentials:
    type: "object"
    required:
    - username
    - password
    - pin    
    properties:
      username:
          type: "string"
          description: SignCloud account username
      password:
          type: "string"
          description: SignCloud account password
      pin:
          type: "string"
          description: SignCloud account PIN
  Credentials_changepin:
    type: "object"
    required:
    - username
    - password
    - pin
    - newpin    
    properties:
      username:
          type: "string"
          description: SignCloud account username
      password:
          type: "string"
          description: SignCloud account password
      pin:
          type: "string"
          description: SignCloud account PIN
      newpin:
          type: "string"
          description: The new SignCloud account PIN
  Credentials_unlockpin:
    type: "object"
    required:
    - username
    - password
    - newpin
    - puk    
    properties:
      username:
          type: "string"
          description: SignCloud account username
      password:
          type: "string"
          description: SignCloud account password
      newpin:
          type: "string"
          description: The new SignCloud account PIN
      puk:
          type: "string"
          description: The token PUK
  Credentials_getobjects:
    type: "object"
    required:
    - username
    - password
    - type
    - identifier
    properties:
      username:
          type: "string"
          description: SignCloud account username
      password:
          type: "string"
          description: SignCloud account password
      type:
          type: "string"
          enum: ["null","3","4"]
          description: "The object type. Allowed values are: PublicKey = 3; Certificate = 4; Both = null"
      identifier:
          type: "string"
          default: "DS0"
          description: Identifier of the pair of keys. Null value retrieves all the objects that the token contains.
          enum: ["DS0","DS1","null"]
  Credentials_tokeninfo:
    type: "object"
    required:
    - username
    - password
    properties:
      username:
          type: "string"
          description: SignCloud account username
      password:
          type: "string"
          description: SignCloud account password
  Credentials_generateotp:
    type: "object"
    required:
    - username
    - password
    - uses  
    properties:
      username:
          type: "string"
          description: SignCloud account username
      password:
          type: "string"
          description: SignCloud account password
      uses:
          type: "number"
          description: Given uses to OTP
  Credentials_signrsa:
    type: "object"
    required:
    - username
    - password
    - pin
    - identifier
    - mechanism
    - plaintext
    - billing_username
    - billing_password
    - otp
    properties:
      username:
          type: "string"
          description: SignCloud account username
      password:
          type: "string"
          description: SignCloud account password
      pin:
          type: "string"
          description: SignCloud account PIN
      identifier:
          type: "string"
          default: "DS0"
          description: Identifier of the pair of keys
      mechanism:
          type: "string"
          description: "Algorithm used for signing. Supported algorithms are: RSAMD5; RSASHA1; RSASHA256; RSASHA512; RSARAW;"
      plaintext:
          type: "string"
          description: Base64 encoded buffer for signing
      billing_username:
          type: "string"
          description: Billing account username
      billing_password:
          type: "string"
          description: Billing account password
      otp:
          type: "string"
          description: "The OTP code previously sent to the user.\n
                        **This parameter is only required and available for specific digital identities**"
  Credentials_decryptrsa:
    type: "object"
    required:
    - username
    - password
    - pin
    - identifier
    - ciphertext
    properties:
      username:
          type: "string"
          description: SignCloud account username
      password:
          type: "string"
          description: SignCloud account password
      pin:
          type: "string"
          description: SignCloud account PIN
      identifier:
          type: "string"
          default: "DS0"
          description: Identifier of the pair of keys
      ciphertext:
          type: "string"
          description: Text to decrypt