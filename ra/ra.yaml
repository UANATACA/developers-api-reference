swagger: '2.0'
info:
  version: 'v1'
  title: UANATACA RA API DOCUMENTATION
  x-logo:
      url: https://raw.githubusercontent.com/UANATACA/RA-REPO/main/img/ra_logo.png?token=GHSAT0AAAAAABQU64XWNG7FWNNNNTPDI36GYPIDJQA
      altText: RA logo
  description: 
      $ref: ./ra_gui.md
host: api.uanataca.com
schemes: 
  - https

x-tagGroups:
  - name: API Reference
    tags:
      - Registration Authority
      - Registration Authority Officer
      - Users
      - Scratchcards
      - Requests
      - eIDAS VideoID
      - External VideoID

tags:
- name: "Registration Authority"
  description: "
  
<html>
A Registration Authority (RA) is an organization delegated by a Certification Authority allowed to manage the life-cyle of digital certificates.</br>
<table>
  <tr>
    <th>Method</th><th>Endpoint</th><th>Action</th>
  </tr>
  <tr>
    <td>POST</td><td><a href='#tag/Registration-Authority/paths/~1api~1v1~1registrationauthorities/post'>/registrationauthorities/</a></td><td>Create a new Registration Authority</td>
  </tr>
  <tr>
    <td>GET</td><td><a href='#tag/Registration-Authority/paths/~1api~1v1~1registrationauthorities/get'>/registrationauthorities/</a></td><td>List all Registration Authorities</td>
  </tr>
  <tr>
    <td>GET</td><td><a href='#tag/Registration-Authority/paths/~1api~1v1~1registrationauthorities~1{id}/get'>/registrationauthorities/{id}/</a></td><td>Get data from a specific Registration Authority</td>
  </tr>
 <tr>
    <td>PUT</td><td><a href='#tag/Registration-Authority/paths/~1api~1v1~1registrationauthorities~1{id}/put'>/registrationauthorities/{id}/</a></td><td>Update info about a Registration Authority</td>
  </tr>
</table> 
</html>
  "

- name: "Registration Authority Officer"
  description: "
  
<html>
A Registration Authority Officer (RAO) is a role responsible for managing requests and verify its content.</br>
<table>
  <tr>
    <th>Method</th><th>Endpoint</th><th>Action</th>
  </tr>
  <tr>
    <td>POST</td><td><a href='#tag/Registration-Authority-Officer/paths/~1api~1v1~1rao/post'>/rao/</a></td><td>Create a new Registration Authority Officer</td>
  </tr>
  <tr>
    <td>GET</td><td><a href='#tag/Registration-Authority-Officer/paths/~1api~1v1~1rao/get'>/rao/</a></td><td>List all Registration Authority Officers</td>
  </tr>
 <tr>
    <td>GET</td><td><a href='#tag/Registration-Authority-Officer/paths/~1api~1v1~1rao~1{id}/get'>/rao/{id}/</a></td><td>Get data from a specific Registration Authority Officer</td>
  </tr>
  <tr>
    <td>PUT</td><td><a href='#tag/Registration-Authority-Officer/paths/~1api~1v1~1rao~1{id}/put'>/rao/{id}/</a></td><td>Update info about a Registration Authority Officer</td>
  </tr>
</table> 
</html>
  "

- name: "Users"
  description: "
  
<html>
A user is the account having access to the Registration Authority platform according to its permissions.</br>
<table>
  <tr>
    <th>Method</th><th>Endpoint</th><th>Action</th>
  </tr>
  <tr>
    <td>POST</td><td><a href='#tag/Users/paths/~1api~1v1~1users/post'>/users/</a></td><td>Create a new user</td>
  </tr>
  <tr>
    <td>GET</td><td><a href='#tag/Users/paths/~1api~1v1~1users/get'>/users/</a></td><td>List all users</td>
  </tr>
 <tr>
    <td>GET</td><td><a href='#tag/Users/paths/~1api~1v1~1users~1{id}/get'>/users/{id}/</a></td><td>Get data from a specific user</td>
  </tr>
  <tr>
    <td>PUT</td><td><a href='#tag/Users/paths/~1api~1v1~1users~1{id}/put'>/users/{id}/</a></td><td>Update info about a user</td>
  </tr>
</table> 
</html>
  "

- name: "Scratchcards"
  description: "
  
<html>
A scratchcard is a virtual card containing the initial secret codes of a digital certificate. Every request requires a scratchcard.</br>
<table>
  <tr>
    <th>Method</th><th>Endpoint</th><th>Action</th>
  </tr>
  <tr>
    <td>GET</td><td><a href='#tag/Scratchcards/paths/~1api~1v1~1scratchcards/get'>/scratchards/</a></td><td>List all available scratchcards</td>
  </tr>
 <tr>
    <td>GET</td><td><a href='#tag/Scratchcards/paths/~1api~1v1~1scratchcards~1{id}/get'>/scratchards/{id}/</a></td><td>Get data from a specific scratchcard</td>
  </tr>
 <tr>
    <td>GET</td><td><a href='#tag/Scratchcards/paths/~1api~1v1~1scratchcards~1get_first_unused/get'>/scratchards/get_first_unused/</a></td><td>Get first unused scratchcard</td>
  </tr>
 <tr>
    <td>POST</td><td><a href='#tag/Scratchcards/paths/~1api~1v1~1scratchcards~1isused/post'>/scratchards/isused/</a></td><td>Get the status of a scratchcard</td>
  </tr>
 <tr>
    <td>POST</td><td><a href='#tag/Scratchcards/paths/~1api~1v1~1scratchcards~1revoke/post'>/scratchards/revoke/</a></td><td>Revoke, suspend or activate the digital certificate associated to a scratchcard</td>
  </tr>
 <tr>
    <td>POST</td><td><a href='#tag/Scratchcards/paths/~1api~1v1~1scratchcards~1whoami/post'>/scratchards/whoami/</a></td><td>Get the request assocaited to a scratchcard</td>
  </tr>
 <tr>
    <td>POST</td><td><a href='#tag/Scratchcards/paths/~1api~1v1~1scratchcards~1move/post'>/scratchards/move/</a></td><td>Move scratchcards from a Registration Authority to another one</td>
  </tr>
</table> 
</html>
  "

- name: "Requests"
  description: "
  
<html>
Manage digital certicate requests life-cycle.</br>
<table>
  <tr>
    <th>Method</th><th>Endpoint</th><th>Action</th>
  </tr>
  <tr>
    <td>POST</td><td><a href='#tag/Requests/paths/~1api~1v1~1requests/post'>/requests/</a></td><td>Create a digital certificate request</td>
  </tr>
 <tr>
    <td>GET</td><td><a href='#tag/Requests/paths/~1api~1v1~1requests/get'>/requests/</a></td><td>List all requests</td>
  </tr>
 <tr>
    <td>GET</td><td><a href='#tag/Requests/paths/~1api~1v1~1requests~1{id}/get'>/requests/{id}/</a></td><td>Get data from a request</td>
  </tr>
 <tr>
    <td>PUT</td><td><a href='#tag/Requests/paths/~1api~1v1~1requests~1{id}/put'>/requests/{id}/</a></td><td>Update info about a request</td>
  </tr>
 <tr>
    <td>DELETE</td><td><a href='#tag/Requests/paths/~1api~1v1~1requests~1{id}~1cancel/delete'>/requests/{id}/cancel/</a></td><td>Cancel a request</td>
  </tr>
 <tr>
    <td>GET</td><td><a href='#tag/Requests/paths/~1api~1v1~1requests~1{id}~1validate/get'>/requests/{id}/validate/</a></td><td>Validate the request fields</td>
  </tr>
 <tr>
    <td>POST</td><td><a href='#tag/Requests/paths/~1api~1v1~1requests~1{id}~1generates_tbs_receipt/post'>/requests/generates_tbs_receipt/</a></td><td>Generates a declaration for a request that must be signed by a RAO</td>
  </tr>
 <tr>
    <td>POST</td><td><a href='#tag/Requests/paths/~1api~1v1~1requests~1{id}~1generate_document/post'>/requests/{id}/generate_document/</a></td><td>Generates a contract related to a request that must be signed by a RAO</td>
  </tr>
 <tr>
    <td>POST</td><td><a href='#tag/Requests/paths/~1api~1v1~1requests~1{id}~1pl_upload_document/post'>/requests/{id}/pl_upload_document/</a></td><td>Upload required documentation</td>
  </tr>
 <tr>
    <td>POST</td><td><a href='#tag/Requests/paths/~1api~1v1~1requests~1{id}~1pl_delete_document/post'>/requests/{id}/pl_delete_document/</a></td><td>Delete a document</td>
  </tr>
 <tr>
    <td>POST</td><td><a href='#tag/Requests/paths/~1api~1v1~1requests~1{id}~1pl_get_document/post'>/requests/{id}/pl_get_document/</a></td><td>Retrieve a document</td>
  </tr>
 <tr>
    <td>GET</td><td><a href='#tag/Requests/paths/~1api~1v1~1requests~1{id}~1pl_get_documents/get'>/requests/{id}/pl_get_documents/</a></td><td>Retrieve all documents</td>
  </tr>
 <tr>
    <td>POST</td><td><a href='#tag/Requests/paths/~1api~1v1~1requests~1{id}~1pl_approve/post'>/requests/{id}/pl_approve/</a></td><td>Approve request</td>
  </tr>
 <tr>
    <td>POST</td><td><a href='#tag/Requests/paths/~1api~1v1~1requests~1{id}~1preauthlink/post'>/requests/{id}/preauthlink/</a></td><td>Get the certificate generation process pre-authenticated link</td>
  </tr> 
<tr>
    <td>POST</td><td><a href='#tag/Requests/paths/~1api~1v1~1requests~1is_renewable/post'>/requests/{id}/is_renewable/</a></td><td>Check if a request certificate is renewable or not</td>
  </tr>
<tr>
    <td>POST</td><td><a href='#tag/Requests/paths/~1api~1v1~1requests~1{id}~1enable_renewal/post'>/requests/{id}/enable_renewal/</a></td><td>Enable the renewal option for a request's certificate</td>
  </tr>
<tr>
    <td>POST</td><td><a href='#tag/Requests/paths/~1api~1v1~1requests~1{id}~1disable_renewal/post'>/requests/{id}/disable_renewal/</a></td><td>Disable the renewal option for a request's certificate</td>
  </tr>
  <tr>
    <td>POST</td><td><a href='#tag/Requests/paths/~1api~1v1~1requests~1{id}~1renewal_status~1/get'>/requests/{id}/renewal_status/</a></td><td>Displays information about renewal status of a request</td>
  </tr>
  <tr>
  <td>POST</td><td><a href='#tag/Requests/paths/~1api~1v1~1requests~1{id}~1check_contact_data_limits~1/post'>/requests/check_contact_data_limits/</a></td><td>Checks if the given contact data is already in use</td>
  </tr>
<tr>
    <td>POST</td><td><a href='#tag/Requests/paths/~1api~1v1~1requests~1{id}~1generate_otp_for_unlock/post'>/requests/{id}/generate_otp_for_unlock/</a></td><td>Send an OTP code for reset or unlock PIN</td>
  </tr>
<tr>
    <td>POST</td><td><a href='#tag/Requests/paths/~1api~1v1~1requests~1{id}~1unlock_pin/post'>/requests/{id}/unlock_pin/</a></td><td>Reset or unlock PIN</td>
  </tr>
</table> 
</html>
  "

- name: "eIDAS VideoID"
  description: "
  
<html>
This allows the management of certificate issuing by establishing a video call for identity verification.</br>
<table>
  <tr>
    <th>Method</th><th>Endpoint</th><th>Action</th>
  </tr>
  <tr>
    <td>POST</td><td><a href='#tag/eIDAS-VideoID/paths/~1api~1v1~1requests~1{id_request}~1upload_videoid_evidence/post'>/requests/{id_request}/upload_videoid_evidence</a></td><td>Upload Documents</td>
  </tr>
</table> 
</html>
  "

- name: "External VideoID"
  description: "
  
<html>
This allows the management of certificate issuing by uploading external evidences for identity verification.</br>
<table>
  <tr>
    <th>Method</th><th>Endpoint</th><th>Action</th>
  </tr>
  <tr>
    <td>POST</td><td><a href='#tag/External-VideoID/paths/~1api~1v1~1requests~1{id_request}~1validate_videoid/post'>/requests/{id_request}/validate_videoid</a></td><td>Validate Video ID Request</td>
  </tr>
 <tr>
    <td>POST</td><td><a href='#tag/External-VideoID/paths/~1api~1v1~1requests~1{id_request}~1refuse_videoid/post'>/requests/{id_request}/refuse_videoid</a></td><td>Refuse Request</td>
  </tr>
  <tr>
    <td>POST</td><td><a href='#tag/External-VideoID/paths/~1api~1v1~1upload~1data~1{video_pk}/put'>/upload/data/{video_pk}/</a></td><td>Upload data evidence</td>
  </tr>
  <tr>
    <td>PUT</td><td><a href='#tag/VExternal-VideoID/paths/~1api~1v1~1upload~1video~1{video_identifier}/post'>/upload/video/{video_identifier}/</a></td><td>Upload video</td>
  </tr>
  <tr>
    <td>GET</td><td><a href='#tag/External-VideoID/paths/~1api~1v1~1download~1video~1{video_identifier}/get'>/download/video/{video_identifier}/</a></td><td>Download video</td>
  </tr>
</table> 
</html>
  "


paths:

###### requests ######
###############################################################################

  /api/v1/requests:
    post: 
      summary: CREATE REQUEST
      tags:
        - Requests
      description: "Creates a new request for digital certificate issuance.</br>
                    <html><blockquote style='background-color:#faf3ac; border-color:#DFDFDF; color:#3b3b3b;'><b>⚠ Each certificate profile has its own set of fields. Please check the list of fields in the <a href='#section/Certificate-Profiles'>Certificate Profiles</a> section.</b></blockquote></html>"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
      - in: "body"
        name: "body"
        schema:
          $ref: "#/definitions/CreateReqObject"
      responses:
        201:
          description: Successful Response
          schema:
            type: object
            description: A JSON object with full information about the created request  
          examples:
            application/json:
                {
                    "pk": 25139,
                    "given_name": "Name",
                    "surname_1": "Surname1",
                    "surname_2": "Surname2",
                    "sex": null,
                    "id_document_type": "TIN",
                    "id_document_country": "IT",
                    "serial_number": "A1111111E",
                    "country_name": "ES",
                    "citizenship": null,
                    "residence": null,
                    "organization_email": null,
                    "email": "mail@domain",
                    "title": null,
                    "organization_name": null,
                    "organizational_unit_1": null,
                    "organizational_unit_2": null,
                    "organization_identifier": null,
                    "responsible_name": null,
                    "responsible_first_surname": null,
                    "responsible_second_surname": null,
                    "responsible_email": null,
                    "responsible_serial": null,
                    "responsible_position": null,
                    "subscriber_responsible_serial": null,
                    "administrative_unit": null,
                    "empowerment": null,
                    "representation": null,
                    "circumstances": null,
                    "limit": null,
                    "registration": null,
                    "process_application": null,
                    "entity_owner": null,
                    "entity_owner_serial_number": null,
                    "description": null,
                    "certificate_set": [],
                    "profile": "PFnubeAFCiudadano",
                    "scratchcard": "5053349",
                    "status": "CREATED",
                    "registering_user": {
                        "pk": 53,
                        "permission_profile": 13,
                        "registration_authority": 116,
                        "request": 144
                    },
                    "approving_user": null,
                    "producing_user": null,
                    "registration_authority": 68,
                    "secure_element": 2,
                    "validity_time": "730",
                    "smartcard_sn": null,
                    "citizen_tax_number": null,
                    "birth_date": null,
                    "birth_country": null,
                    "birth_city": null,
                    "birth_province": null,
                    "birth_state": null,
                    "birth_district": null,
                    "birth_canton": null,
                    "id_document_description": null,
                    "id_document_issuer": null,
                    "organization_rol": null,
                    "professional_id_number": null,
                    "mobile_phone_number": "+34600112233",
                    "fix_phone_number": null,
                    "residence_address": null,
                    "residence_city": null,
                    "residence_province": null,
                    "residence_postal_code": null,
                    "residence_state": null,
                    "residence_district": null,
                    "residence_canton": null,
                    "organization_tax_number": null,
                    "organization_address": null,
                    "organization_city": null,
                    "organization_province": null,
                    "organization_country": null,
                    "organization_postal_code": null,
                    "organization_state": null,
                    "organization_url": null,
                    "responsible_legal_level": null,
                    "subscriber": null,
                    "responsible_legal_documents": null,
                    "special_conditions": null,
                    "responsible_registry_data": null,
                    "approving_rao": null,
                    "producing_rao": null,
                    "id_document_number": null
                }
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              detail:
                type: string
                description: JSON syntax error description
          examples:
            application/json:
              {
                  "detail": "JSON parse error - Expecting ',' delimiter: line 3 column 2 (char 30)"
              }
        500:
          description: Invalid or missing parameters | Permission denied
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "500",
                    "id": "80a9e5709417bdc9",
                    "error": "Invalid ScratchCard"
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://api.uanataca.com/api/v1/requests/ \
                    --cert './path/to/certificate/cer.pem' \
                    --key './path/to/private-key/key.pem' \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "profile": "PFnubeAFCiudadano",
                      "scratchcard": "5053349",
                      "secure_element": "2",
                      "registration_authority": "116",
                      "country_name": "ES",
                      "serial_number": "A1111111E",
                      "id_document_country": "IT",
                      "id_document_type": "TIN",
                      "given_name": "Name",
                      "surname_1": "Surname1",
                      "surname_2" "Surname2"
                      "email": "mail@domain",
                      "mobile_phone_number": "+34600112233",
                      "paperless_mode": 1
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/requests/"

                  payload = {
                      "profile": "PFnubeAFCiudadano",
                      "scratchcard": "5053349",
                      "secure_element": "2",
                      "registration_authority": "116",
                      "country_name": "ES",
                      "serial_number": "A1111111E",
                      "id_document_country": "IT",
                      "id_document_type": "TIN",
                      "given_name": "Name",
                      "surname_1": "Surname1",
                      "surname_2" "Surname2"
                      "email": "mail@domain",
                      "mobile_phone_number": "+34600112233",
                      "paperless_mode": 1
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.post(url, json=payload, headers=headers, cert=('./path/to/certificate/cer.pem', './path/to/private-key/key.pem'))

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const options = {
                    cert: fs.readFileSync(
                      path.resolve(__dirname, './path/to/public-cert.pem'),
                      `utf-8`,
                    ),
                    key: fs.readFileSync(
                      path.resolve(__dirname, './path/to/private-key.key'),
                      'utf-8',
                    ),

                  const sslConfiguredAgent = new https.Agent(options);
                  
                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/requests/',
                    {
                      method: 'POST',
                      agent: sslConfiguredAgent,
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        profile: 'PFnubeAFCiudadano',
                        scratchcard: '5053349',
                        secure_element: '2',
                        registration_authority: '116',
                        country_name: 'ES',
                        serial_number: 'A1111111E',
                        id_document_country: 'ES',
                        id_document_type: 'IDC',
                        given_name: 'Name',
                        surname_1: 'Surname1',        
                        surname_2: 'Surname2',
                        email: 'mail@domain',
                        mobile_phone_number: '+34600112233',
                        paperless_mode: 1
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        JObject json = JObject.Parse(@"{
                          profile: 'PFnubeAFCiudadano',
                          scratchcard: '5053349',
                          secure_element: '2',
                          registration_authority: '116',
                          country_name: 'ES',
                          serial_number: 'A1111111E',
                          id_document_country: 'ES',
                          id_document_type: 'IDC',
                          given_name: 'Name',
                          surname_1: 'Surname1',        
                          surname_2: 'Surname2',
                          email: 'mail@domain',
                          mobile_phone_number: '+34600112233',
                          paperless_mode: 1
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PostAsync("https://api.uanataca.com/api/v1/requests/", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }       
###########
    get: 
      summary: LIST REQUESTS
      tags:
        - Requests
      description: Retrieves the list of requests stored. Path parameters are only necessary if an explicit filter is wanted.
      parameters: 
        -  name: scratchcard
           in: path
           description: Number of scratchcard
           required: false
        -  name: given_name
           in: path
           description: Name
           required: false
        -  name: surname_1
           in: path
           description: First surname
           required: false
        -  name: surname_2
           in: path
           description: Last surname
           required: false
        -  name: serial_number
           in: path
           description: Document number
           required: false
        -  name: email
           in: path
           description: Email of the certificate owner
           required: false
        -  name: mobile_phone_number
           in: path
           description: Phone number of the certificate owner
           required: false
        -  name: registration_authority
           in: path
           description: Registration Authority number where certificate belongs
           required: false
      produces:
        - application/json 
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              count:
                type: string
                description: The number of existing requests
              next:
                type: string
                description: The list next page endpoint
              previous:
                type: string
                description: The list previous page endpoint                
              results:
                type: object
                description: A JSON object with full information related to each listed request
          examples:
            application/json:
                {
                    "count": 87,
                    "next": "https://access.bit4id.org:13035/api/v1/requests/?page=2",
                    "previous": null,
                    "results": [
                        {
                            "pk": 36876,
                            "given_name": "Name",
                            "surname_1": "Surname1",
                            "surname_2": "Surname2",
                            "sex": null,
                            "id_document_type": "IDC",
                            "id_document_country": "ES",
                            "serial_number": "Y3646957E",
                            "country_name": "ES",
                            "citizenship": null,
                            "residence": "ES",
                            "organization_email": null,
                            "email": "mail@domain",
                            "title": null,
                            "organization_name": null,
                            "organizational_unit_1": null,
                            "organizational_unit_2": null,
                            "organization_identifier": null,
                            "responsible_name": null,
                            "responsible_first_surname": null,
                            "responsible_second_surname": null,
                            "responsible_email": null,
                            "responsible_serial": null,
                            "responsible_position": null,
                            "subscriber_responsible_serial": null,
                            "administrative_unit": null,
                            "empowerment": null,
                            "representation": null,
                            "circumstances": null,
                            "limit": null,
                            "registration": null,
                            "process_application": null,
                            "entity_owner": null,
                            "entity_owner_serial_number": null,
                            "description": null,
                            "certificate_set": [
                                {
                                    "profile": "PFSoftAF",
                                    "status": 2,
                                    "valid_from": "2021-03-17T11:42:00Z",
                                    "valid_to": "2023-03-17T11:42:00Z",
                                    "valid": "REVOKED",
                                    "revokation_reason": 0,
                                    "serial_number": "28a70ba50632ba07",
                                    "subject": "CN=Name Surname1 Surname2, 2.5.4.5=IDCES-Y3646957E, 2.5.4.42=Name, 2.5.4.4=Surname1 Surname2, C=ES",
                                    "data": "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",
                                    "issuer": "2.5.4.97=VATES-A66721499, CN=UANATACA CA1 DEVEL 2016, OU=AC-UANATACA, O=UANATACA S.A., L=Barcelona (see current address at www.uanataca.com/address), C=ES"
                                }
                            ],
                            "profile": "PFSoftAFCiudadano",
                            "scratchcard": "5053616",
                            "status": "ISSUED",
                            "registering_user": {
                                "pk": 578,
                                "permission_profile": 1,
                                "registration_authority": 303,
                                "request": 25935
                            },
                            "approving_user": {
                                "pk": 578,
                                "permission_profile": 1,
                                "registration_authority": 303,
                                "request": 25935
                            },
                            "producing_user": {
                                "pk": 1,
                                "permission_profile": 1,
                                "registration_authority": 1,
                                "request": 1
                            },
                            "registration_authority": 303,
                            "secure_element": 0,
                            "validity_time": "730",
                            "smartcard_sn": null,
                            "citizen_tax_number": "",
                            "birth_date": null,
                            "birth_country": null,
                            "birth_city": "",
                            "birth_province": "",
                            "birth_state": "",
                            "birth_district": "",
                            "birth_canton": "",
                            "id_document_description": "",
                            "id_document_issuer": "",
                            "organization_rol": null,
                            "professional_id_number": null,
                            "mobile_phone_number": "+34999999999",
                            "fix_phone_number": "",
                            "residence_address": "",
                            "residence_city": "",
                            "residence_province": "",
                            "residence_postal_code": "",
                            "residence_state": "",
                            "residence_district": "",
                            "residence_canton": "",
                            "organization_tax_number": null,
                            "organization_address": null,
                            "organization_city": null,
                            "organization_province": null,
                            "organization_country": null,
                            "organization_postal_code": null,
                            "organization_state": null,
                            "organization_url": null,
                            "responsible_legal_level": null,
                            "subscriber": null,
                            "responsible_legal_documents": null,
                            "special_conditions": null,
                            "responsible_registry_data": null,
                            "approving_rao": {
                                "pk": 1400,
                                "given_name": "RAO_Name",
                                "surname_1": "RAO_Surname1",
                                "surname_2": "RAO_Surname2",
                                "certificate": {
                                    "profile": "PFnubeNC",
                                    "status": 0,
                                    "valid_from": "2020-12-01T14:52:00Z",
                                    "valid_to": "2022-12-01T14:52:00Z",
                                    "valid": "VALID",
                                    "revokation_reason": null,
                                    "serial_number": "28a70ba50632ba07",
                                    "subject": "CN=RAO_Name RAO_Surname1 RAO_Surname2, 2.5.4.5=IDCES-Y3646957E, 2.5.4.42=RAO_Name, 2.5.4.4=RAO_Surname1 RAO_Surname2, OU=RAO_Name RAO_Surname1 DPR:www.uanataca.com, C=ES",
                                    "data": "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",
                                    "issuer": "2.5.4.97=VATES-A66721499, CN=UANATACA CA1 DEVEL 2016, OU=AC-UANATACA, O=UANATACA S.A., L=Barcelona (see current address at www.uanataca.com/address), C=ES"
                                },
                                "id_document_number": "A1111111X",
                                "id_document_description": "",
                                "id_document_issuer": "",
                                "registration_authority": [],
                                "registration_authority_master": 327
                            },
                            "producing_rao": {
                                "pk": 1400,
                                "given_name": "RAO_Name",
                                "surname_1": "RAO_Surname1",
                                "surname_2": "RAO_Surname2",
                                "certificate": {
                                    "profile": "PFnubeNC",
                                    "status": 0,
                                    "valid_from": "2020-12-01T14:52:00Z",
                                    "valid_to": "2022-12-01T14:52:00Z",
                                    "valid": "VALID",
                                    "revokation_reason": null,
                                    "serial_number": "28a70ba50632ba07",
                                    "subject": "CN=RAO_Name RAO_Surname1 RAO_Surname2, 2.5.4.5=IDCES-Y3646957E, 2.5.4.42=RAO_Name, 2.5.4.4=RAO_Surname1 RAO_Surname2, OU=RAO_Name RAO_Surname1 DPR:www.uanataca.com, C=ES",
                                    "data": "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",
                                    "issuer": "2.5.4.97=VATES-A66721499, CN=UANATACA CA1 DEVEL 2016, OU=AC-UANATACA, O=UANATACA S.A., L=Barcelona (see current address at www.uanataca.com/address), C=ES"
                                },
                                "id_document_number": "A1111111X",
                                "id_document_description": "",
                                "id_document_issuer": "",
                                "registration_authority": [],
                                "registration_authority_master": 327
                            },
                            "id_document_number": "",
                            "id_responsible_document_type": null,
                            "id_responsible_document_country": null,
                            "id_responsible_document_number": null,
                            "organizational_unit_3": null,
                            "paperless_mode": true,
                            "ext_recognition_data": "",
                            "complement_number": null,
                            "id_responsible_document_issuer": null,
                            "provider_registration_number": null,
                            "communication_language": "es"
                        }
                    ]
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X GET \
                    https://api.uanataca.com/api/v1/requests/
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/requests/"

                  response = requests.get(url)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/requests/',
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        var request = await client.GetAsync("https://api.uanataca.com/api/v1/requests/");
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }

#############
  /api/v1/requests/{id}:
    get: 
      summary: GET REQUEST
      tags:
        - Requests
      description: Returns full information about a request.
      produces:
        - application/json 
      parameters:
        - in: path
          name: id
          type: string
          description: The unique identifier of the request
          required: true
      responses:
        200:
          description: Successful Response
          schema:
              type: object
              description: The JSON object with full information associated to the approved request
          examples:
            application/json:
                {
                    "pk": 25139,
                    "given_name": "Name",
                    "surname_1": "Surname1",
                    "surname_2": "Surname2",
                    "sex": null,
                    "id_document_type": "TIN",
                    "id_document_country": "IT",
                    "serial_number": "A1111111E",
                    "country_name": "ES",
                    "citizenship": null,
                    "residence": null,
                    "organization_email": null,
                    "email": "mail@domain",
                    "title": null,
                    "organization_name": null,
                    "organizational_unit_1": null,
                    "organizational_unit_2": null,
                    "organization_identifier": null,
                    "responsible_name": null,
                    "responsible_first_surname": null,
                    "responsible_second_surname": null,
                    "responsible_email": null,
                    "responsible_serial": null,
                    "responsible_position": null,
                    "subscriber_responsible_serial": null,
                    "administrative_unit": null,
                    "empowerment": null,
                    "representation": null,
                    "circumstances": null,
                    "limit": null,
                    "registration": null,
                    "process_application": null,
                    "entity_owner": null,
                    "entity_owner_serial_number": null,
                    "description": null,
                    "certificate_set": [
                        {
                            "profile": "PFnubeAF",
                            "status": 0,
                            "valid_from": "2021-03-19T09:23:00Z",
                            "valid_to": "2022-03-19T09:23:00Z",
                            "valid": "VALID",
                            "revokation_reason": null,
                            "serial_number": "48dc42f3763a49c4",
                            "subject": "CN=Name Surname1 Surname2, 2.5.4.5=TINES-11111111B, 2.5.4.42=Name, 2.5.4.4=Surname1 Surname2, C=ES",
                            "data": "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",
                            "issuer": "2.5.4.97=VATES-A66721499, CN=UANATACA CA1 DEVEL 2016, OU=AC-UANATACA, O=UANATACA S.A., L=Barcelona (see current address at www.uanataca.com/address), C=ES"
                        }
                    ],
                    "profile": "PFnubeAFCiudadano",
                    "scratchcard": "5051762",
                    "status": "ISSUED",
                    "registering_user": {
                        "pk": 527,
                        "permission_profile": 19,
                        "registration_authority": 303,
                        "request": 28634
                    },
                    "approving_user": {
                        "pk": 527,
                        "permission_profile": 19,
                        "registration_authority": 303,
                        "request": 28634
                    },
                    "producing_user": {
                        "pk": 527,
                        "permission_profile": 19,
                        "registration_authority": 303,
                        "request": 28634
                    },
                    "registration_authority": 504,
                    "secure_element": 2,
                    "validity_time": "365",
                    "smartcard_sn": null,
                    "citizen_tax_number": null,
                    "birth_date": null,
                    "birth_country": null,
                    "birth_city": null,
                    "birth_province": null,
                    "birth_state": null,
                    "birth_district": null,
                    "birth_canton": null,
                    "id_document_description": null,
                    "id_document_issuer": null,
                    "organization_rol": null,
                    "professional_id_number": null,
                    "mobile_phone_number": "+34600112233",
                    "fix_phone_number": null,
                    "residence_address": null,
                    "residence_city": null,
                    "residence_province": null,
                    "residence_postal_code": null,
                    "residence_state": null,
                    "residence_district": null,
                    "residence_canton": null,
                    "organization_tax_number": null,
                    "organization_address": null,
                    "organization_city": null,
                    "organization_province": null,
                    "organization_country": null,
                    "organization_postal_code": null,
                    "organization_state": null,
                    "organization_url": null,
                    "responsible_legal_level": null,
                    "subscriber": null,
                    "responsible_legal_documents": null,
                    "special_conditions": null,
                    "responsible_registry_data": null,
                    "approving_rao": {
                        "pk": 1400,
                        "given_name": "RAO_Name",
                        "surname_1": "RAO_Surname1",
                        "surname_2": "RAO_Surname2",
                        "certificate": {
                            "profile": "PFnubeNC",
                            "status": 0,
                            "valid_from": "2020-12-01T14:52:00Z",
                            "valid_to": "2022-12-01T14:52:00Z",
                            "valid": "VALID",
                            "revokation_reason": null,
                            "serial_number": "28a70ba50632ba07",
                            "subject": "CN=RAO_Name, 2.5.4.5=IDCES-Y1111111E, 2.5.4.42=RAO_Name, 2.5.4.4=RAO_Surname1 RAO_Surname2, OU=RAO_Name RAO_Surname_1 DPR:www.uanataca.com, C=ES",
                            "data": "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",
                            "issuer": "2.5.4.97=VATES-A66721499, CN=UANATACA CA1 DEVEL 2016, OU=AC-UANATACA, O=UANATACA S.A., L=Barcelona (see current address at www.uanataca.com/address), C=ES"
                        },
                        "id_document_number": "Y3646959E",
                        "id_document_description": "IDC",
                        "id_document_issuer": "",
                        "registration_authority": [],
                        "registration_authority_master": 327,
                        "is_identificator": false
                    },
                    "producing_rao": {
                        "pk": 1400,
                        "given_name": "RAO_Name",
                        "surname_1": "RAO_Surname1",
                        "surname_2": "RAO_Surname2",
                        "certificate": {
                            "profile": "PFnubeNC",
                            "status": 0,
                            "valid_from": "2020-12-01T14:52:00Z",
                            "valid_to": "2022-12-01T14:52:00Z",
                            "valid": "VALID",
                            "revokation_reason": null,
                            "serial_number": "28a70ba50632ba07",
                            "subject": "CN=RAO_Name, 2.5.4.5=IDCES-Y1111111E, 2.5.4.42=RAO_Name, 2.5.4.4=RAO_Surname1 RAO_Surname2, OU=RAO_Name RAO_Surname_1 DPR:www.uanataca.com, C=ES",
                            "data": "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",
                            "issuer": "2.5.4.97=VATES-A66721499, CN=UANATACA CA1 DEVEL 2016, OU=AC-UANATACA, O=UANATACA S.A., L=Barcelona (see current address at www.uanataca.com/address), C=ES"
                        },
                        "id_document_number": "Y1111111E",
                        "id_document_description": "IDC",
                        "id_document_issuer": "",
                        "registration_authority": [],
                        "registration_authority_master": 327,
                        "is_identificator": false
                    },
                    "id_document_number": null,
                    "id_responsible_document_type": null,
                    "id_responsible_document_country": null,
                    "id_responsible_document_number": null,
                    "organizational_unit_3": null,
                    "paperless_mode": true,
                    "ext_recognition_data": null,
                    "complement_number": null,
                    "id_responsible_document_issuer": null,
                    "provider_registration_number": null,
                    "communication_language": "",
                    "identification_rao": null
                }
        404:
          description: Invalid request id
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "400",
                    "id": "3172438498af74e8",
                    "error": "No Request matches the given query."
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X GET \
                    https://api.uanataca.com/api/v1/requests/25139/
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/requests/25139/"

                  response = requests.get(url)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/requests/25139/',
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();

                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        var request = await client.GetAsync("https://api.uanataca.com/api/v1/requests/25139/");
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
#############
    put: 
      summary: UPDATE REQUEST
      tags:
        - Requests
      description: Updates information about a request.
      consumes:
        - application/json 
      produces:
        - application/json 
      parameters:
        - in: path
          name: id
          type: string
          description: The unique identifier of the Request
          required: true
        - in: "body"
          name: "body"
          schema:
            $ref: "#/definitions/UpdateReqObject"
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            description: A JSON object with full information about the updated request  
          examples:
            application/json:
                {
                    "pk": 25139,
                    "given_name": "Name",
                    "surname_1": "Surname1",
                    "surname_2": "New_Surname2",
                    "sex": null,
                    "id_document_type": "TIN",
                    "id_document_country": "IT",
                    "serial_number": "A1111111E",
                    "country_name": "ES",
                    "citizenship": null,
                    "residence": null,
                    "organization_email": null,
                    "email": "New_mail@domain",
                    "title": null,
                    "organization_name": null,
                    "organizational_unit_1": null,
                    "organizational_unit_2": null,
                    "organization_identifier": null,
                    "responsible_name": null,
                    "responsible_first_surname": null,
                    "responsible_second_surname": null,
                    "responsible_email": null,
                    "responsible_serial": null,
                    "responsible_position": null,
                    "subscriber_responsible_serial": null,
                    "administrative_unit": null,
                    "empowerment": null,
                    "representation": null,
                    "circumstances": null,
                    "limit": null,
                    "registration": null,
                    "process_application": null,
                    "entity_owner": null,
                    "entity_owner_serial_number": null,
                    "description": null,
                    "certificate_set": [],
                    "profile": "PFnubeAFCiudadano",
                    "scratchcard": "5053349",
                    "status": "CREATED",
                    "registering_user": {
                        "pk": 53,
                        "permission_profile": 13,
                        "registration_authority": 116,
                        "request": 144
                    },
                    "approving_user": null,
                    "producing_user": null,
                    "registration_authority": 68,
                    "secure_element": 2,
                    "validity_time": "730",
                    "smartcard_sn": null,
                    "citizen_tax_number": null,
                    "birth_date": null,
                    "birth_country": null,
                    "birth_city": null,
                    "birth_province": null,
                    "birth_state": null,
                    "birth_district": null,
                    "birth_canton": null,
                    "id_document_description": null,
                    "id_document_issuer": null,
                    "organization_rol": null,
                    "professional_id_number": null,
                    "mobile_phone_number": "+34600112233",
                    "fix_phone_number": null,
                    "residence_address": null,
                    "residence_city": null,
                    "residence_province": null,
                    "residence_postal_code": null,
                    "residence_state": null,
                    "residence_district": null,
                    "residence_canton": null,
                    "organization_tax_number": null,
                    "organization_address": null,
                    "organization_city": null,
                    "organization_province": null,
                    "organization_country": null,
                    "organization_postal_code": null,
                    "organization_state": null,
                    "organization_url": null,
                    "responsible_legal_level": null,
                    "subscriber": null,
                    "responsible_legal_documents": null,
                    "special_conditions": null,
                    "responsible_registry_data": null,
                    "approving_rao": null,
                    "producing_rao": null,
                    "id_document_number": null
                }
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              detail:
                type: string
                description: JSON syntax error
          examples:
            application/json:
              {
                  "detail": "JSON parse error - Expecting ',' delimiter: line 3 column 2 (char 30)"
              }
        404:
          description: Request id not found
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "400",
                    "id": "d79de76df1307cba",
                    "error": "No Request matches the given query."
                }
        412:
          description: Already approved request
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "412",
                    "id": "e59481276ddcc529",
                    "error": "Invalid request status"
                }
        500:
          description: Invalid or missing parameters | Permission denied
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "500",
                    "id": "a400c26a689ae9b4",
                    "error": "You do not have permission to perform this action."
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X PUT \
                    https://api.uanataca.com/api/v1/requests/25139/ \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "profile": "PFnubeAFCiudadano",
                      "scratchcard": "5052046",
                      "country_name: 'ES',
                      "registration_authority": '303', 
                      "surname_2": "New_Surname2",
                      "email": "New_mail@domain.com"
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/requests/25139/"

                  payload = {
                      "profile": "PFnubeAFCiudadano",
                      "scratchcard": "5052046",
                      "country_name: 'ES',
                      "registration_authority": '303',
                      "surname_2": "New_Surname2",
                      "email": "New_mail@domain.com"
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.put(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/requests/25139/',
                    {
                      method: 'PUT',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        profile: 'PFnubeAFCiudadano',
                        scratchcard: '5052046',
                        country_name: 'ES',
                        registration_authority: '303', 
                        surname_2: 'New_Surname2',
                        email: 'New_mail@domain.com'
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        JObject json = JObject.Parse(@"{
                          profile: 'PFnubeAFCiudadano',
                          scratchcard: '5052046',
                          country_name: 'ES',
                          registration_authority: '303', 
                          surname_2: 'New_Surname2',
                          email: 'New_mail@domain.com'
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PutAsync("https://api.uanataca.com/api/v1/requests/25139/", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }       
#############
  /api/v1/requests/{id}/cancel:
    delete: 
      summary: CANCEL REQUEST
      tags:
        - Requests
      description: Change the request status to CANCELLED. Requests can be cancelled only if the digital certificate is not issued yet.
      produces:
        - application/json 
      parameters:
        - in: path
          name: id
          type: string
          description: The unique identifier of the Request
          required: true
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              status:
                type: string
                description: The successful cancellation status message
          examples:
            application/json:
                {
                    "status": "Request cancelled"
                }
        404:
          description: Invalid request id
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "400",
                    "id": "cbdd2e84c0e7f107",
                    "error": "No Request matches the given query."
                }
        412:
          description: Already approved/cancelled request id
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "412",
                    "id": "478492eec17596d3",
                    "error": "Invalid request status"
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X DELETE \
                    https://api.uanataca.com/api/v1/requests/25139/cancel/
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/requests/25139/cancel/"

                  response = requests.delete(url)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/requests/25139/cancel/',
                    {method: 'DELETE'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        var request = await client.DeleteAsync("https://api.uanataca.com/api/v1/requests/25139/cancel/");
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }

#############
  /api/v1/requests/{id}/validate:
    get: 
      summary: VALIDATE REQUEST
      tags:
        - Requests
      description: Validate the request fields.
      produces:
        - application/json 
      parameters:
        - in: path
          name: id
          type: string
          description: The unique identifier of the Request
          required: true
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            description: A JSON object with the request missing parameters (if any)
          examples:
            application/json:
                [
                    [
                        "serial_number",
                        "missing"
                    ],
                    [
                        "mobile_phone_number",
                        "missing"
                    ]
                ]
        404:
          description: Invalid request id
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "400",
                    "id": "de450daacf24014e",
                    "error": "No Request matches the given query."
                }
        412:
          description: Already approved request id
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "412",
                    "id": "e443f8e716ee4cfa",
                    "error": "Invalid request status"
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X GET \
                    https://api.uanataca.com/api/v1/requests/25139/validate/
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/requests/25139/validate/"

                  response = requests.get(url)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/requests/25139/validate/',
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        var request = await client.GetAsync("https://api.uanataca.com/api/v1/requests/25139/validate/");
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }

#############
  /api/v1/requests/{id}/generates_tbs_receipt:
    post: 
      summary: GENERATE RAO DECLARATION
      tags:
        - Requests
      description: "Generates a declaration related to a request that must be signed by a RAO.<br>
                    The receipt is signed in the <HTML><a href='#tag/Requests/paths/~1api~1v1~1requests~1{id}~1pl_approve/post'>Approve Request</a></HTML> call."
      consumes:
        - application/json
      produces:
        - application/json 
      parameters:
        - in: path
          name: id
          type: string
          description: The unique identifier of the Request
          required: true
        - in: "body"
          name: "body"
          schema:
            $ref: "#/definitions/TBSObject"
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              serial_number:
                type: string
                description: The receipt serial number
              receipt:
                type: string
                description: The receipt content
          examples:
            application/json:
                {
                    "serial_number": "3ef3696d2939241d",
                    "receipt": "El operador RAO_Name RAO_Surname1 con número de identificación 12345678P\r\nactuando en calidad de operador autorizado de registro del prestador de servicios\r\nde confianza UANATACA, S.A. con NIF A66721499, (UANATACA en lo sucesivo)\r\n\r\nDECLARA\r\n\r\nQue previa verificación de acuerdo a la Declaración de Prácticas de UANATACA\r\npublicadas en www.uanataca.com, la información detallada a continuación es\r\ncorrecta y será incluida (donde aplicable) en la solicitud de certificados\r\ncualificados:\r\n\r\n- Datos de Identificación de la solicitud de certificados: 36893\r\n- Nombre y Apellidos del Firmante: Name Surname1 Surname2\r\n- DNI/NIE/PASAPORTE del Firmante: 11111111B\r\n- Dirección de correo electrónico del Firmante: mail@domain.com\r\n\r\n\r\n18/03/2021\r\n\r\n\r\n\r\n--------------------------------------------------------------------\r\nFdo. User Admin\r\nOperador autorizado de registro"
                }
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              detail:
                type: string
                description: JSON syntax error description
          examples:
            application/json:
              {
                  "detail": "JSON parse error - Expecting ',' delimiter: line 3 column 2 (char 30)"
              }
        404:
          description: Invalid request id
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message    
          examples:
            application/json:
              {
                  "code": "400",
                  "id": "b78952287417c96f",
                  "error": "No Request matches the given query."
              }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://api.uanataca.com/api/v1/requests/25139/generates_tbs_receipt/ \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "rao": "1400",
                      "type": "APPROVE"
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/requests/25139/generates_tbs_receipt/"

                  payload = {
                    "rao": "1400",
                    "type": "APPROVE"
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.post(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/requests/25139/generates_tbs_receipt/',
                    {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        rao: '1400',
                        type: 'APPROVE'
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        JObject json = JObject.Parse(@"{
                          rao: '1400',
                          type: 'APPROVE'
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PostAsync("https://api.uanataca.com/api/v1/requests/25139/generates_tbs_receipt/", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }

#############
  /api/v1/requests/{id}/generate_document:
    post: 
      summary: GENERATE CONTRACT
      tags:
        - Requests
      description: "Generates a contract associated to a request that must be signed by a RAO.<br>
                    The contract is signed in the <HTML><a href='#tag/Requests/paths/~1api~1v1~1requests~1{id}~1pl_approve/post'>approve request</a></HTML> call."
      consumes:
        - application/json
      produces:
        - application/json 
      parameters:
        - in: path
          name: id
          type: string
          description: The unique identifier of the Request
          required: true
        - in: "body"
          name: "body"
          schema:
            $ref: "#/definitions/ContractObject"
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              document:
                type: string
                description: The document ready for PDF conversion
          examples:
            application/json:
                {
                    "document": "%PDF-1.4\n%���� ReportLab Generated PDF document http://www.reportlab.com\n1 0 obj\n<<\n/F1 2 0 R\n>>\nendobj\n2 0 obj\n<<\n/Bas (...) "
                }
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              detail:
                type: string
                description: JSON syntax error description
          examples:
            application/json:
              {
                  "detail": "JSON parse error - Expecting ',' delimiter: line 3 column 2 (char 30)"
              }
        404:
          description: Invalid request id
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message    
          examples:
            application/json:
              {
                  "code": "400",
                  "id": "b78952287417c96f",
                  "error": "No Request matches the given query."
              }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://api.uanataca.com/api/v1/requests/25139/generate_document/ \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "doctype": "contract"
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/requests/25139/generate_document/"

                  payload = {
                    "doctype": "contract"
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.post(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/requests/25139/generates_document/',
                    {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        doctype: 'contract'
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        JObject json = JObject.Parse(@"{
                          doctype: 'contract'
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PostAsync("https://api.uanataca.com/api/v1/requests/25139/generates_document/", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }

#############
  /api/v1/requests/{id}/pl_upload_document:
    post: 
      summary: UPLOAD DOCUMENT
      tags:
        - Requests
      description: Upload the required documentation for certificate issuance.
      produces:
        - application/json
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: id
          type: string
          description: The unique identifier of the Request
          required: true
        - in: formData
          name: document
          description: The file to be uploaded
          required: true
          type: string
        - in: formData
          name: type
          enum: [document_front, document_rear, document_owner, extra_document]
          description: The type of the document to be uploaded
          required: true
          type: string
      responses:
        201:
          description: Successful Response
          schema:
            type: object
            properties:
              pk:
                type: number
                description: The document database id
              type: 
                type: number
                description: The uploaded document type
          examples:
            application/json:
                {
                    "pk": 48312,
                    "type": "document_front"
                }
        404:
          description: Invalid request id
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "400",
                    "id": "c6972c3efdc6db8e",
                    "error": "No Request matches the given query."
                } 
        412:
          description: Precondition Failed
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            Missing or blank parameters:
                code: "418"
                id: "29b7b6d28fa97f1d"
                error: Invalid paramiters
        500:
          description: Internal server error
          schema: 
            type: object
            properties: 
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message 
          examples: 
            Wrong file content-type:
              code: "500"
              id: "80b7dca326bf3cdd"
              error: Invalid content_type
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://api.uanataca.com/api/v1/requests/25139/pl_upload_document/ \
                    -H 'Content-Type: multipart/form-data' \
                    -F document=@sample_folder/img_front.png \
                    -F type=document_front
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/requests/25139/pl_upload_document/"

                  payload={'type': 'document_front'}
                  files=[
                    ('document',('file',open('sample_folder/img_front.png','rb'),'image/png'))
                  ]
                  headers = {
                    'Content-Type': 'multipart/form-data'
                  }

                  response = requests.request("POST", url, headers=headers, data=payload, files=files)

                  print(response.text)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";
                  import FormData from "form-data";
                  import fs from "fs";

                  var formData = new FormData();

                  formData.append('type', 'document_front');
                  formData.append('document', fs.createReadStream('sample_folder/img_front.png'));

                  var url = 'https://api.uanataca.com/api/v1/requests/25139/pl_upload_document/';

                  var options = {
                    method: 'POST',
                    body: formData,
                    redirect: 'follow'
                  };

                  options.body = formData;

                  fetch(url, options)
                    .then(res => res.json())
                    .then(json => console.log(json))
                    .catch(err => console.error('error:' + err));
        - lang: 'C#'
          source: |
                  using System;
                  using System.Threading.Tasks;
                  using RestSharp;
                  using System.Security.Cryptography.X509Certificates;


                  public class Program
                  {
                    public static Task Main(string[] args)
                      {
                          X509Certificate2 clientCert = new X509Certificate2("./path_to_cert/certfile.p12", "p12passwd");

                          var client = new RestClient("https:/api.uanataca.com/api/v1/requests/59188/pl_upload_document/");
                          client.Timeout = -1;
                          client.RemoteCertificateValidationCallback = (sender, certificate, chain, sslPolicyErrors) => true;
                          client.ClientCertificates = new X509CertificateCollection() { clientCert };

                          string imgPath = "./path_to_img/img_owner.png";

                          var request = new RestRequest(Method.POST);
                          request.AlwaysMultipartFormData = true;
                          request.AddHeader("content-type", "multipart/form-data");
                          request.AddParameter("type", "document_owner");
                          request.AddFile("document", imgPath, "image/png");

                          IRestResponse response = client.Execute(request);

                          Console.WriteLine(response.Content);
                          return Task.CompletedTask;
                      }
                  }        
#############
  /api/v1/requests/{id}/pl_delete_document:
    post: 
      summary: DELETE DOCUMENT
      tags:
        - Requests
      description: Delete an identification document previously uploaded.
      produces:
        - application/json
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: id
          type: string
          description: The unique identifier of the Request
          required: true
        - in: formData
          name: docpk
          description: The database primary key of the document to be deleted
          required: true
          type: string
      responses:
          200:
            description: Successful Response
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: The successful response status message  
            examples:
              application/json:
                  {
                      "status": "Document deleted successfully"
                  }              
          404:
            description: Invalid document id
            schema:
              type: object
              properties:
                error:
                  type: string
                  description: The response error message                
            examples:
              application/json:
                  {
                      "error": "No documents found with id 616026"
                  }
          500:
            description: Missing parameter `docpk`
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: The response status code
                id:
                  type: string
                  description: The response status id
                error:
                  type: string
                  description: The response status message                
            examples:
              application/json:
                  {
                      "code": "500",
                      "id": "7cb82a609ad8e270",
                      "error": "invalid literal for int() with base 10: ''"
                  } 
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://api.uanataca.com/api/v1/requests/25139/pl_delete_document/ \
                    -H 'Content-Type: multipart/form-data' \
                    -F docpk="document_front"
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/requests/25139/pl_delete_document/"

                  payload={'docpk': 'document_front'}

                  headers = {
                    'Content-Type': 'multipart/form-data'
                  }

                  response = requests.request("POST", url, headers=headers, data=payload, files=files)

                  print(response.text)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";
                  import FormData from "form-data";
                  import fs from "fs";

                  var formData = new FormData();

                  formData.append('docpk', 'document_front');

                  const url = 'https://api.uanataca.com/api/v1/requests/25139/pl_delete_document/';

                  var options = {
                    method: 'POST',
                    body: formData,
                    redirect: 'follow'
                  };

                  options.body = formData;

                  fetch(url, options)
                    .then(res => res.json())
                    .then(json => console.log(json))
                    .catch(err => console.error('error:' + err));
        - lang: 'C#'
          source: |
                  using System;
                  using System.Threading.Tasks;
                  using RestSharp;
                  using System.Security.Cryptography.X509Certificates;

                  public class Program
                  {
                    public static Task Main(string[] args)
                      {
                          X509Certificate2 clientCert = new X509Certificate2("./path_to_cert/certfile.p12", "p12passwd");

                          var client = new RestClient("https://api.uanataca.com/api/v1/requests/25139/pl_delete_document/");
                          client.Timeout = -1;
                          client.RemoteCertificateValidationCallback = (sender, certificate, chain, sslPolicyErrors) => true;
                          client.ClientCertificates = new X509CertificateCollection() { clientCert };

                          var request = new RestRequest(Method.POST);
                          request.AlwaysMultipartFormData = true;
                          request.AddHeader("content-type", "multipart/form-data");
                          request.AddParameter("docpk", "document_front");

                          IRestResponse response = client.Execute(request);

                          Console.WriteLine(response.Content);
                          return Task.CompletedTask;
                      }
                  }
#############
  /api/v1/requests/{id}/pl_get_document:
    post: 
      summary: GET A DOCUMENT
      tags:
        - Requests
      description: Retrieves a request's associated document in Base64 format.
      produces:
        - application/json
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: id
          type: string
          description: The unique identifier of the Request
          required: true
        - in: formData
          name: type
          description: The type of the document to be retrieved
          required: true
          type: string
          enum: [document_front, document_rear, document_owner, extra_document, contract, signed_contract]
        - in: formData
          name: rao_id
          description: The rao id number. **This field is required only if request status is CREATED or VIDEOREVIEW**
          required: true
          type: string
      responses:
          200:
            description: Successful Response
            schema:
              type: object
              properties:
                pk:
                  type: string
                  description: The request id
                document:
                  type: string
                  description: The document content in Base64 format
                type:
                  type: string
                  description: The document type   
            examples:
              application/json:
                  [
                      {
                          "document": "iVBORw0KGgoAAAANSUhEUgAAAPwAAAChCAYAAAGUvOLYAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAABU9xJREFUeNqMlmuMXGUZx3/nfmZ257bX7m53t91uKbS1Ak0kIFIwIZHUSP0kBmLiJSIWXa3SBE1TkaZaU2liQFObED9QE0M(...)",
                          "type": "contract"
                      }
                  ]
          404:
            description: Invalid request id
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: The response status code
                id:
                  type: string
                  description: The response status id
                error:
                  type: string
                  description: The response status message                
            examples:
              application/json:
                  {
                      "code": "400",
                      "id": "c6972c3efdc6db8e",
                      "error": "No Request matches the given query."
                  }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://api.uanataca.com/api/v1/requests/25139/pl_get_document/ \
                    -H 'Content-Type: multipart/form-data' \
                    -F type="contract"
                    -F rao_id="1400"
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/requests/25139/pl_get_document/"

                  payload={'type': 'document_front',
                  'rao_id': '1400'}

                  headers = {
                    'Content-Type': 'multipart/form-data'
                  }

                  response = requests.request("POST", url, headers=headers, data=payload, files=files)

                  print(response.text)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";
                  import FormData from "form-data";
                  import fs from "fs";

                  var formData = new FormData();

                  formData.append('type', 'document_front');
                  formdata.append("rao_id", "1400");

                  const url = 'https://api.uanataca.com/api/v1/requests/25139/pl_get_document/';

                  var options = {
                    method: 'POST',
                    body: formData,
                    redirect: 'follow'
                  };

                  options.body = formData;

                  fetch(url, options)
                    .then(res => res.json())
                    .then(json => console.log(json))
                    .catch(err => console.error('error:' + err));
        - lang: 'C#'
          source: |
                  using System;
                  using System.Threading.Tasks;
                  using RestSharp;
                  using System.Security.Cryptography.X509Certificates;


                  public class Program
                  {
                    public static Task Main(string[] args)
                      {
                          X509Certificate2 clientCert = new X509Certificate2("./path_to_cert/certfile.p12", "p12passwd");

                          var client = new RestClient("https://api.uanataca.com/api/v1/requests/25139/pl_get_document/");
                          client.Timeout = -1;
                          client.RemoteCertificateValidationCallback = (sender, certificate, chain, sslPolicyErrors) => true;
                          client.ClientCertificates = new X509CertificateCollection() { clientCert };

                          var request = new RestRequest(Method.POST);
                          request.AlwaysMultipartFormData = true;
                          request.AddHeader("content-type", "multipart/form-data");
                          request.AddParameter("type", "document_front");
                          request.AddParameter("rao_id", "1400");

                          IRestResponse response = client.Execute(request);

                          Console.WriteLine(response.Content);
                          return Task.CompletedTask;
                      }
                  }     
#############
  /api/v1/requests/{id}/pl_get_documents:
    get: 
      summary: GET ALL DOCUMENTS
      tags:
        - Requests
      description: Retrieves all uploaded documents associated to a request.
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          description: The unique identifier of the Request
          required: true
      responses:
          200:
            description: Successful Response
            schema:
              type: object
              properties:
                pk:
                  type: string
                  description: The document database id
                document:
                  type: string
                  description: The document content in Base64 format
                type:
                  type: string
                  description: The document type                  
            examples:
              application/json:
                  [
                      {
                          "pk": 48312,
                          "document": "iVBORw0KGgoAAAANSUhEUgAAAPwAAAChCAYAAAGUvOLYAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAABU9xJREFUeNqMlmuMXGUZx3/nfmZ257bX7m53t91uKbS1Ak0kIFIwIZHUSP0kBmLiJSIWXa3SBE1TkaZaU2liQFObED9QE0M(...)",
                          "type": "document_front"
                      },
                      {
                          "pk": 48320,
                          "document": "7m53t91uKbS1Ak0kIFIwIZHUSP0kBmLiJiVBORw0KGgoAAAANSUhEUgAAAPwTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAABU9xJREFUeNqAAAChCAYAAAGUvOLYAAAAGXRFWHRMlmuMXGUZx3/nfmZ257bXSIWXa3SBE1TkaZaU2liQFObED9QE0M(...)",
                          "type": "document_rear"
                      },
                      {
                          "pk": 48321,
                          "document": "ANSUhEUgAAAPwTb2Z0d27m53t91uREFUeNqAAACwIZHUSP0kBmLiJiVBORw0KGgoAAAFyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAABU9xJhCAYAAAGU7bXSIWXa3SBE1TkaZaU2DDKxk89fogpvOLYAAAAGXRFWHRMlmuMXGUZx3/nfmZ25liQFObED9QE0M(...)",
                          "type": "signed_contract"
                      } 
                  ]
          404:
            description: Invalid request id
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: The response status code
                id:
                  type: string
                  description: The response status id
                error:
                  type: string
                  description: The response status message                
            examples:
              application/json:
                  {
                      "code": "400",
                      "id": "c6972c3efdc6db8e",
                      "error": "No Request matches the given query."
                  }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X GET \
                    https://api.uanataca.com/api/v1/requests/25139/pl_get_documents/
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/requests/25139/pl_get_documents/"

                  response = requests.get(url)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/requests/25139/pl_get_documents/',
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        var request = await client.GetAsync("https://api.uanataca.com/api/v1/requests/25139/pl_get_documents/");
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  } 
#############
  /api/v1/requests/{id}/pl_approve:
    post: 
      summary: APPROVE REQUEST
      tags:
        - Requests
      description: Approval of a request by a RAO. At this moment the RAO will sign the receipt and the contract.
      consumes:
        - application/json
      produces:
        - application/json 
      parameters:
        - in: path
          name: id
          type: string
          description: The unique identifier of the Request
          required: true
        - in: "body"
          name: "body"
          schema:
            $ref: "#/definitions/PlApproveReqObject"
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              secrets:
                type: object
                properties:
                    puk: 
                      type: string
                    enrollment_code: 
                      type: string
                    pin:
                      type: string
                    erc:
                      type: string
              request:
                type: object
                description: The JSON object with the information associated to the approved request
          examples:
            application/json:
                {
                    "secrets": {
                        "puk": "06092551",
                        "enrollment_code": "8N!9xPhB",
                        "pin": "76293975",
                        "erc": "3706008596"
                    },
                    "request": {
                        "pk": 25319,
                        "given_name": "Name",
                        "surname_1": "Surname1",
                        "surname_2": "Surname2",
                        "sex": null,
                        "id_document_type": "TIN",
                        "id_document_country": "IT",
                        "serial_number": "A1111111E",
                        "country_name": "ES",
                        "citizenship": null,
                        "residence": null,
                        "organization_email": null,
                        "email": "mail@domain",
                        "title": null,
                        "organization_name": null,
                        "organizational_unit_1": null,
                        "organizational_unit_2": null,
                        "organization_identifier": null,
                        "responsible_name": null,
                        "responsible_first_surname": null,
                        "responsible_second_surname": null,
                        "responsible_email": null,
                        "responsible_serial": null,
                        "responsible_position": null,
                        "subscriber_responsible_serial": null,
                        "administrative_unit": null,
                        "empowerment": null,
                        "representation": null,
                        "circumstances": null,
                        "limit": null,
                        "registration": null,
                        "process_application": null,
                        "entity_owner": null,
                        "entity_owner_serial_number": null,
                        "description": null,
                        "certificate_set": [],
                        "profile": "PFSoftAFCiudadano",
                        "scratchcard": "5053349",
                        "status": "ENROLLREADY",
                        "registering_user": {
                            "pk": 34,
                            "permission_profile": 18,
                            "registration_authority": 39,
                            "request": 605
                        },
                        "approving_user": {
                            "pk": 34,
                            "permission_profile": 18,
                            "registration_authority": 39,
                            "request": 605
                        },
                        "producing_user": null,
                        "registration_authority": 39,
                        "secure_element": 0,
                        "validity_time": "730",
                        "smartcard_sn": null,
                        "citizen_tax_number": null,
                        "birth_date": null,
                        "birth_country": null,
                        "birth_city": null,
                        "birth_province": null,
                        "birth_state": null,
                        "birth_district": null,
                        "birth_canton": null,
                        "id_document_description": null,
                        "id_document_issuer": null,
                        "organization_rol": null,
                        "professional_id_number": null,
                        "mobile_phone_number": "+34333333333",
                        "fix_phone_number": null,
                        "residence_address": null,
                        "residence_city": null,
                        "residence_province": null,
                        "residence_postal_code": null,
                        "residence_state": null,
                        "residence_district": null,
                        "residence_canton": null,
                        "organization_tax_number": null,
                        "organization_address": null,
                        "organization_city": null,
                        "organization_province": null,
                        "organization_country": null,
                        "organization_postal_code": null,
                        "organization_state": null,
                        "organization_url": null,
                        "responsible_legal_level": null,
                        "subscriber": null,
                        "responsible_legal_documents": null,
                        "special_conditions": null,
                        "responsible_registry_data": null,
                        "approving_rao": {
                            "pk": 218,
                            "given_name": "RAO_Name",
                            "surname_1": "RAO_Surname1",
                            "surname_2": "RAO_Surname2",
                            "certificate": {
                                "profile": "EXTERNAL",
                                "status": 0,
                                "valid_from": "2018-10-16T11:07:00Z",
                                "valid_to": "2020-10-15T11:07:00Z",
                                "valid": "VALID",
                                "revokation_reason": null,
                                "serial_number": "0d0c1d8b1e4efefa",
                                "subject": "CN=RAO_Name RAO_Surname1 RAO_Surname2,
                                2.5.4.5=TINIT-RRRTST84R14F839U,
                                2.5.4.42=RAO_Name,
                                2.5.4.4=RAO_Surname1 RAO_Surname2, C=ES",
                                "data": "MIIH5zCCBc+gAwIBAgI...",
                                "issuer": "2.5.4.97=VATES-A66721499,
                                CN=UANATACA CA1 DEVEL 2016,
                                OU=AC-UANATACA,
                                O=UANATACA S.A.,
                                L=Barcelona C=ES"
                            },
                            "id_document_number": "RRRTST84R14F839U",
                            "id_document_description": null,
                            "id_document_issuer": null,
                            "registration_authority": [
                                39
                            ],
                            "registration_authority_master": 39
                        },
                        "producing_rao": null,
                        "id_document_number": null
                    }
                }
        400:
          description: Bad Request
          schema: 
            allOf:
              - type: object
                properties:
                  detail:
                    type: string
                    description: The response status message
              - type: object
                properties:
                  error:
                    type: string
                    description: The response status message
          examples:
            Missing request documents:
              error: "Missing required docs"
            Invalid JSON:
              detail: "JSON parse error - Expecting ',' delimiter: line 5 column 5 (char 85)"
        404:
          description: Not Found
          schema: 
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message   
          examples: 
            Invalid request id:
              code: "400"
              id: "2e7ec3d691bca3c7"
              error: ""

        412:
          description: Missing request parameters
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "415",
                    "id": "78d52fe134eff259",
                    "error": "Invalid request fields: mobile_phone_number"
                }
        500:
          description: Invalid RAO parameters
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "500",
                    "id": "2a871f452832f624",
                    "error": "Rao matching query does not exist."
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://api.uanataca.com/api/v1/requests/25139/pl_approve/ \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "username": "RAO_Name",
                      "password": "Rw36:#Y6",
                      "pin": "tejedora32",
                      "rao_id": "898",
                      "lang": "ES"
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/requests/25139/pl_approve/"

                  payload = {
                    "username": "RAO_Name",
                    "password": "Rw36:#Y6",
                    "pin": "tejedora32",
                    "rao_id": "898",
                    "lang": "ES"
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.post(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/requests/25139/pl_approve/',
                    {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        username: 'RAO_Name',
                        password: 'Rw36:#Y6',
                        pin: 'tejedora32',
                        rao_id: '898',
                        lang: 'ES'
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        JObject json = JObject.Parse(@"{
                          username: 'RAO_Name',
                          password: 'Rw36:#Y6',
                          pin: 'tejedora32',
                          rao_id: '898',
                          lang: 'ES'
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PostAsync("https://api.uanataca.com/api/v1/requests:id/pl_approve/", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
                  
#############
  /api/v1/requests/{id}/preauthlink:
    post: 
        summary: GET PRE-AUTHENTICATION LINK
        tags:
          - Requests
        description: Get the pre-authenticated link to start the online certificate generation process for a specific request.
        produces:
          - application/json
        parameters:
          - in: path
            name: id
            type: string
            description: The unique identifier of the Request
            required: true
        responses:
          200:
            description: Successful Response
            schema:
              type: object
              properties:
                preauthenticatedlink:
                  type: string
                  description: The pre-authentication link associated to the approved request 
            examples:
              application/json:
                  {
                      "preauthenticatedlink": "https://api.uanataca.com/lcmpl/enrollment/auth/8edddd76680a4ecc978bb95b4fb39029"
                  }
          403:
            description: Permission denied
            schema:
              type: object
              properties:
                detail:
                  type: string
                  description: The response status code              
            examples:
              application/json:
                  {
                      "detail": "You do not have permission to perform this action."
                  }
          404:
            description: Invalid request id
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: The response status code
                id:
                  type: string
                  description: The response status id
                error:
                  type: string
                  description: The response status message                
            examples:
              application/json:
                  {
                      "code": "400",
                      "id": "de450daacf24014e",
                      "error": "No Request matches the given query."
                  }
        x-codeSamples:
          - lang: 'curl'
            source: |
                    curl -i -X POST \
                      https://api.uanataca.com/api/v1/requests/25139/preauthlink/
          - lang: 'Python'
            source: |
                    import requests

                    url = "https://api.uanataca.com/api/v1/requests/25139/preauthlink/"

                    response = requests.post(url)

                    data = response.json()
                    print(data)
          - lang: 'Node.js'
            source: |
                    import fetch from "node-fetch";

                    const resp = await fetch(
                      'https://api.uanataca.com/api/v1/requests/25139/preauthlink/',
                      {method: 'POST'}
                    );

                    const data = await resp.text();
                    console.log(data);
          - lang: 'C#'
            source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                        {
                          var request = await client.PostAsync("https://api.uanataca.com/api/v1/requests/25139/preauthlink/");
                          var response = await request.Content.ReadAsStringAsync();

                          Console.WriteLine(response);
                        }
                      }
                    }

#############
  /api/v1/requests/is_renewable:
    post: 
      summary: IS RENEWABLE
      tags:
        - Requests
      description: Find out about whether a request is renewable or not.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          schema:
            $ref: "#/definitions/IsRenScrObject"
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            description: A JSON object containing full information about the renewable request
          examples:
            application/json:
                {
                    "torenew": {
                        "data": "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",
                        "profile": "PFnubeAF",
                        "subject": "CN=Name Surname1 Surname2, 2.5.4.5=IDCES-Y3646957E, 2.5.4.42=Name, 2.5.4.4=Surname1 Surname2, C=ES",
                        "issuer": "2.5.4.97=VATES-A66721499, CN=UANATACA CA1 DEVEL 2016, OU=AC-UANATACA, O=UANATACA S.A., L=Barcelona (see current address at www.uanataca.com/address), C=ES",
                        "valid_from": "2021-03-19T15:58:00Z",
                        "valid_to": "2021-03-26T15:58:00Z",
                        "serial_number": "1862295652b6e042",
                        "status": 0,
                        "pk": 21686,
                        "revokation_reason": null,
                        "type": "FIRSTISSUE"
                    },
                    "renewed": false,
                    "request": {
                        "pk": 25139,
                        "given_name": "Name",
                        "surname_1": "Surname1",
                        "surname_2": "Surname2",
                        "sex": null,
                        "id_document_type": "TIN",
                        "id_document_country": "IT",
                        "serial_number": "A1111111E",
                        "country_name": "ES",
                        "citizenship": null,
                        "residence": "ES",
                        "organization_email": null,
                        "email": "mail@domain",
                        "title": null,
                        "organization_name": null,
                        "organizational_unit_1": null,
                        "organizational_unit_2": null,
                        "organization_identifier": null,
                        "responsible_name": null,
                        "responsible_first_surname": null,
                        "responsible_second_surname": null,
                        "responsible_email": null,
                        "responsible_serial": null,
                        "responsible_position": null,
                        "subscriber_responsible_serial": null,
                        "administrative_unit": null,
                        "empowerment": null,
                        "representation": null,
                        "circumstances": null,
                        "limit": null,
                        "registration": null,
                        "process_application": null,
                        "entity_owner": null,
                        "entity_owner_serial_number": null,
                        "description": null,
                        "certificate_set": [
                            {
                                "profile": "PFnubeAF",
                                "status": 0,
                                "valid_from": "2021-03-19T15:58:00Z",
                                "valid_to": "2021-03-26T15:58:00Z",
                                "valid": "VALID",
                                "revokation_reason": null,
                                "serial_number": "1862295652b6e042",
                                "subject": "CN=Name Surname1 Surname2, 2.5.4.5=IDCES-Y3646957E, 2.5.4.42=Name, 2.5.4.4=Surname1 Surname2, C=ES",
                                "data": "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",
                                "issuer": "2.5.4.97=VATES-A66721499, CN=UANATACA CA1 DEVEL 2016, OU=AC-UANATACA, O=UANATACA S.A., L=Barcelona (see current address at www.uanataca.com/address), C=ES"
                            }
                        ],
                        "profile": "PFnubeAFCiudadano",
                        "scratchcard": "5056027",
                        "status": "ISSUED",
                        "registering_user": {
                            "pk": 578,
                            "permission_profile": 1,
                            "registration_authority": 303,
                            "request": 25935
                        },
                        "approving_user": {
                            "pk": 578,
                            "permission_profile": 1,
                            "registration_authority": 303,
                            "request": 25935
                        },
                        "producing_user": {
                            "pk": 527,
                            "permission_profile": 19,
                            "registration_authority": 303,
                            "request": 28634
                        },
                        "registration_authority": 121,
                        "secure_element": 2,
                        "validity_time": "7",
                        "smartcard_sn": null,
                        "citizen_tax_number": "",
                        "birth_date": null,
                        "birth_country": null,
                        "birth_city": "",
                        "birth_province": "",
                        "birth_state": "",
                        "birth_district": "",
                        "birth_canton": "",
                        "id_document_description": "",
                        "id_document_issuer": "",
                        "organization_rol": null,
                        "professional_id_number": null,
                        "mobile_phone_number": "+34999999999",
                        "fix_phone_number": "",
                        "residence_address": "",
                        "residence_city": "",
                        "residence_province": "",
                        "residence_postal_code": "",
                        "residence_state": "",
                        "residence_district": "",
                        "residence_canton": "",
                        "organization_tax_number": null,
                        "organization_address": null,
                        "organization_city": null,
                        "organization_province": null,
                        "organization_country": null,
                        "organization_postal_code": null,
                        "organization_state": null,
                        "organization_url": null,
                        "responsible_legal_level": null,
                        "subscriber": null,
                        "responsible_legal_documents": null,
                        "special_conditions": null,
                        "responsible_registry_data": null,
                        "approving_rao": {
                            "pk": 1400,
                            "given_name": "RAO_Name",
                            "surname_1": "RAO_Surname1",
                            "surname_2": "RAO_Surname2",
                            "certificate": {
                                "profile": "PFnubeNC",
                                "status": 0,
                                "valid_from": "2020-12-01T14:52:00Z",
                                "valid_to": "2022-12-01T14:52:00Z",
                                "valid": "VALID",
                                "revokation_reason": null,
                                "serial_number": "28a70ba50632ba07",
                                "subject": "CN=RAO_Name RAO_Surname1 RAO_Surname2, 2.5.4.5=IDCES-Y3646957E, 2.5.4.42=RAO_Name, 2.5.4.4=RAO_Surname1 RAO_Surname2, OU=RAO_Name Gonzalez DPR:www.uanataca.com, C=ES",
                                "data": "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",
                                "issuer": "2.5.4.97=VATES-A66721499, CN=UANATACA CA1 DEVEL 2016, OU=AC-UANATACA, O=UANATACA S.A., L=Barcelona (see current address at www.uanataca.com/address), C=ES"
                            },
                            "id_document_number": "Y3646959E",
                            "id_document_description": "Mi descripcion",
                            "id_document_issuer": "aASSAD",
                            "registration_authority": [],
                            "registration_authority_master": 327,
                            "is_identificator": false
                        },
                        "producing_rao": {
                            "pk": 1400,
                            "given_name": "RAO_Name",
                            "surname_1": "RAO_Surname1",
                            "surname_2": "RAO_Surname2",
                            "certificate": {
                                "profile": "PFnubeNC",
                                "status": 0,
                                "valid_from": "2020-12-01T14:52:00Z",
                                "valid_to": "2022-12-01T14:52:00Z",
                                "valid": "VALID",
                                "revokation_reason": null,
                                "serial_number": "28a70ba50632ba07",
                                "subject": "CN=RAO_Name RAO_Surname1 RAO_Surname2, 2.5.4.5=IDCES-Y3646957E, 2.5.4.42=RAO_Name, 2.5.4.4=RAO_Surname1 RAO_Surname2, OU=RAO_Name Gonzalez DPR:www.uanataca.com, C=ES",
                                "data": "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",
                                "issuer": "2.5.4.97=VATES-A66721499, CN=UANATACA CA1 DEVEL 2016, OU=AC-UANATACA, O=UANATACA S.A., L=Barcelona (see current address at www.uanataca.com/address), C=ES"
                            },
                            "id_document_number": "Y3646959E",
                            "id_document_description": "Mi descripcion",
                            "id_document_issuer": "aASSAD",
                            "registration_authority": [],
                            "registration_authority_master": 327,
                            "is_identificator": false
                        },
                        "id_document_number": "",
                        "id_responsible_document_type": null,
                        "id_responsible_document_country": null,
                        "id_responsible_document_number": null,
                        "organizational_unit_3": null,
                        "paperless_mode": true,
                        "ext_recognition_data": "",
                        "complement_number": null,
                        "id_responsible_document_issuer": null,
                        "provider_registration_number": null,
                        "communication_language": "es",
                        "identification_rao": null
                    }
                }
        400:
          description: JSON syntax error
          schema:
            type: object
            properties:
              detail:
                type: string
                description: The response status message             
          examples:
            application/json:
                {
                    "detail": "JSON parse error - Expecting ',' delimiter: line 3 column 5 (char 38)"
                }
        412:
          description: Precondition Failed
          schema:
            type: object
            properties:
              code:
                type: number
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message           
          examples:
            Invalid paramiters:
                    "code": 418,
                    "id": "5596b382cbc2b8c6"
                    "error": "Invalid paramiters"  
            Certificate revoked:
                    "code": 419,
                    "id": "f387051b1e2f75e2"
                    "error": "Certificate revoked"
            Certificate expired:
                    "code": 420,
                    "id": "f387051b1e2f75e2"
                    "error": "Certificate expired"
            Renewal disabled by RAO:
                    "code": 421,
                    "id": "f387051b1e2f75e2"
                    "error": "Renewal disabled by Registration Authority Officer"
            Renewal disabled by ra:
                    "code": 422
                    "id": "f387051b1e2f75e2"
                    "error": "Renewal not available"
            Renewal not available:
                    "code": 423,
                    "id": "8fa1ecfd59176186"
                    "error": "Renewal not available"
            Maximum renewals exceeded:
                    "code": 424,
                    "id": "8fa1ecfd59176186"
                    "error": "Maximum number of renewals exceeded"
            Maximum renewal age exceeded:
                    "code": 425,
                    "id": "8fa1ecfd59176186"
                    "error": "Maximum request age exceeded"
            Not enabled by RAO:
                    "code": 426,
                    "id": "61e83b49ce6de6b3"
                    "error": "Request not enabled for renewal by RAO"
            Certificate suspended:
                    "code": 427,
                    "id": "61e83b49ce6de6b3"
                    "error": "Certificate suspended"
                  
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://api.uanataca.com/api/v1/requests/is_renewable/ \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "scratchcard": "5053349",
                      "erc": ",_3A26F!"
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/requests/is_renewable/"

                  payload = {
                    "scratchcard": "5053349",
                    "erc": ",_3A26F!"
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.post(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/requests/is_renewable/',
                    {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        scratchcard: '5053349',
                        erc: ',_3A26F!'
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        JObject json = JObject.Parse(@"{
                          scratchcard: '5053349',
                          erc: ',_3A26F!'
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PostAsync("https://api.uanataca.com/api/v1/requests/is_renewable/", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
#############
  /api/v1/requests/{id}/enable_renewal:
    post: 
      summary: ENABLE RENEWAL
      tags:
        - Requests
      description: Activates the renewal option for a certificate
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          description: The response status message
          required: true
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              status:
                type: string
                description: The response status message (renewal enabled)
          examples:
            application/json:
                {
                    "status": "Renewal enabled for request"
                }
        404:
          description: Not Found
          schema:
            type: object
            properties:
              code:
                type: number
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message           
          examples:
            Non-existent request number:
                {
                    "code": "400",
                    "id": "f03579946f89a49e",
                    "error": "No Request matches the given query."
                }
            Invalid request number:
                {
                    "code": "400",
                    "id": "65c411b9c308443e",
                    "error": ""
                }
            
        412:
          description: Precondition Failed
          schema: 
            type: object
            properties:
              code:
                type: number
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message  
          examples: 
            Request not available for enable renewal:
              {
                "code": "412",
                "id": "0a15d574c826c870",
                "error": "Request not eligible for renewal"
              }
            Request not issued or certificate not valid:
              {
                "code": "412",
                "id": "67a1a1dae3d7a95d",
                "error": "Invalid request status"
              }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://api.uanataca.com/api/v1/requests/25139/enable_renewal/
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/requests/25139/enable_renewal/"

                  response = requests.post(url)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/requests/25139/enable_renewal/',
                    {method: 'POST'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        var request = await client.PostAsync("https://api.uanataca.com/api/v1/requests/25139/enable_renewal/", null);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
#############
  /api/v1/requests/{id}/disable_renewal:
    post: 
      summary: DISABLE RENEWAL
      tags:
        - Requests
      description: Deactivates the renewal option for a certificate
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          description: The response status message
          required: true
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              status:
                type: string
                description: The response status message (renewal disabled)
          examples:
            application/json:
                {
                    "status": "Renewal disabled for request"
                }
        404:
          description: Invalid parameters
          schema:
            type: object
            properties:
              code:
                type: number
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message           
          examples:
            application/json:
                {
                    "code": "400",
                    "id": "f03579946f89a49e",
                    "error": "No Request matches the given query."
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://api.uanataca.com/api/v1/requests/25139/disable_renewal/
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/requests/25139/disable_renewal/"

                  response = requests.post(url)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/requests/25139/disable_renewal/',
                    {method: 'POST'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        var request = await client.PostAsync("https://api.uanataca.com/api/v1/requests/37037/disable_renewal/", null);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
#############
  /api/v1/requests/{id}/renewal_status/:
    get: 
      summary: GET RENEWAL STATUS
      tags:
        - Requests
      description: Displays information about renewal status of a request
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          description: The response status message
          required: true
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              request_is_renewable:
                type: boolean
                description: Shows if the request is eligible for renewal
              renewal_enabled:
                type: boolean
                description: Shows if the request has renewal enabled
              reason:
                type: string
                description: Detailed reason of the current status
          examples:
            application/json:
                {
                  "request_is_renewable": false,
                  "renewal_enabled": false,
                  "reason": "Not yet enabled"
                }
#############
#  /api/v1/requests/{id}/approve_renewal/:
#   post: 
#     summary: APPROVE RENEWAL
#     tags:
#       - Requests
#     description: Approves the review of eIDAS representative profiles renewals
#     produces:
#       - application/json
#     parameters:
#       - in: path
#         name: id
#         type: string
#         description: The response status message
#         required: true
#     responses:
#       200:
#         description: Successful Response
#         schema:
#           type: object
#           properties:
#             request_is_renewable:
#               type: boolean
#               description: Shows if the request is eligible for renewal
#             renewal_enabled:
#               type: boolean
#               description: Shows if the request has renewal enabled
#             reason:
#               type: string
#               description: Detailed reason of the current status
#         examples:
#           application/json:
#               {
#                 "request_is_renewable": false,
#                 "renewal_enabled": false,
#                 "reason": "Not yet enabled"
#               }
#############
#  /api/v1/requests/{id}/upload_renewal_document/:
#   post: 
#     summary: UPLOAD RENEWAL DOCUMENTS
#     tags:
#       - Requests
#     description: Upload documentation for eIDAS representative profiles renewals
#     produces:
#       - application/json
#     parameters:
#       - in: path
#         name: id
#         type: string
#         description: The response status message
#         required: true
#        - in: body
#          name: body
#          schema:
#     responses:
#       200:
#         description: Successful Response
#         schema:
#           type: object
#           properties:

#         examples:
#           application/json:
#               {
#                 "request_is_renewable": false,
#                 "renewal_enabled": false,
#                 "reason": "Not yet enabled"
#               }
#############
  /api/v1/requests/check_contact_data_limits/:
    post: 
      summary: CHECK CONTACT DATA
      tags:
        - Requests
      description: Checks if the given contact data is already in use.
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          schema:
            type: object
            properties:
              registration_authority:
                type: number
                description: Registration authority number where the contact data it's going to be consulted.
              serial_number:
                type: string
                description: Serial number to check
              email:
                type: string
                description: Email address to check
              mobile_phone_number:
                type: string
                description: Mobile phone number to check
            
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              reason:
                type: string
                description: Response reason
              result: 
                type: string
                description: Response result
              registration_authority: 
                type: number
                description: Registration authority checked
          examples:
            Succesful Response:
                result: ok
                registration_authority: 1
            mobile_phone_number response:
                reason: Too many different documents associated to the same phone number
                result: ko
                registration_authority: 1
            email response:
                reason: Too many different documents associated to the same email address
                result: ko
                registration_authority: 1  
            contact data response:
                reason: Too many different documents associated to the same email and phone
                result: ko
                registration_authority: 1  
        
#############
  /api/v1/requests/{id}/generate_otp_for_unlock:
    post: 
      summary: OTP FOR RESET/UNLOCK PIN
      tags:
        - Requests
      description: Sends an OTP code via SMS for PIN reset or unlock.
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          description: The unique identifier of the Request
          required: true
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              status:
                type: string
                description: Successful status message
              message: 
                type: number
                description: Successful status description
          examples:
            application/json:
                {
                    "status": "success",
                    "message": "OTP sent via SMS"
                }
        500:
          description: Invalid request id
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "500",
                    "id": "8a1289c3606148ce",
                    "error": "Request matching query does not exist."
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://api.uanataca.com/api/v1/requests/25139/generate_otp_for_unlock/
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/requests/25139/generate_otp_for_unlock/"

                  response = requests.post(url)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/requests/25139/generate_otp_for_unlock/',
                    {method: 'POST'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        var request = await client.PostAsync("https://api.uanataca.com/api/v1/requests/25139/generate_otp_for_unlock/");
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
#############
  /api/v1/requests/{id}/unlock_pin:
    post: 
      summary: RESET/UNLOCK PIN
      tags:
        - Requests
      description: Performs the PIN reset or unlock operation
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          description: The unique identifier of the Request
          required: true
        - in: "body"
          name: "body"
          schema:
            $ref: "#/definitions/ResetPinObject"
      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              status:
                type: string
                description: The response status code
              message:
                type: string
                description: The response status message
          examples:
            application/json:
                {
                    "status": "success",
                    "message": "Pin unlocked successfully"
                }
        412:
          description: Invalid request id | parameters | invalid otp 
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "412",
                    "id": "64943e09cbd42ea7",
                    "error": "Invalid Request"
                }
        500:
          description: JSON syntax error | Pin not locked
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "500",
                    "id": "21484514a0d347f7",
                    "error": "JSON parse error - Expecting ',' delimiter: line 4 column 5 (char 75)"
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://api.uanataca.com/api/v1/requests/25139/unlock_pin/ \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "scratchcard": "5053349",
                      "enrollment_code": ",_3A26F!",
                      "newpin": "nuevopin33",
                      "otp": "211489"
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/requests/25139/unlock_pin/"

                  payload = {
                    "scratchcard": "5053349",
                    "enrollment_code": "7T8xdGBN",
                    "newpin": "nuevopin33",
                    "otp": "211489"
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.post(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/requests/25139/unlock_pin/',
                    {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        scratchcard: '5053349',
                        enrollment_code: '7T8xdGBN',
                        newpin: 'nuevopin33',
                        otp: '211489'
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        JObject json = JObject.Parse(@"{
                          scratchcard: '5053349',
                          enrollment_code: '7T8xdGBN',
                          newpin: 'nuevopin33',
                          otp: '211489'
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PostAsync("https://api.uanataca.com/api/v1/requests/25139/unlock_pin/");
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }


###### scratchcards ######
###############################################################################

  /api/v1/scratchcards:
    get: 
      summary: LIST SCRATCHCARDS
      tags:
        - Scratchcards
      description: Gets the list of scratchcards
      produces:
        - application/json
      parameters:
        - in: query
          name: registration_authority
          type: string
          description: Registration authority number
        - in: query
          name: sn
          type: string
          description: Number of scratchcard
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              count:
                type: string
                description: The number of existing scratchcards
              next:
                type: string
                description: The list next page endpoint
              previous:
                type: string
                description: The list previous page endpoint                
              results:
                type: array
                items:
                  type: object
                  description: A list of JSON objects containing information about scratchcards
          examples:
            application/json:
                {
                    "count": 550,
                    "next": null,
                    "previous": null,
                    "results": [
                        {
                            "pk": 1021,
                            "sn": "1200946",
                            "secrets": "{\"erc\": \"8207878566\", \"enrollment_code\": \"97Q6B,6W\", \"pin\": \"25936657\", \"puk\": \"25936657\"}",
                            "registration_authority": 121
                        },
                        {
                            "pk": 1040,
                            "sn": "1200947",
                            "secrets": "{\"erc\": \"6292998123\", \"enrollment_code\": \"_,463vt:\", \"pin\": \"08695572\", \"puk\": \"52351291\"}",
                            "registration_authority": 121
                        },
                        {
                            "pk": 1045,
                            "sn": "1200948",
                            "secrets": "{\"erc\": \"8117606937\", \"enrollment_code\": \",8cj6Ax2\", \"pin\": \"85376977\", \"puk\": \"86175206\"}",
                            "registration_authority": 121
                        },
                        (...)
                    ]
                }
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              detail:
                type: string
                description: JSON syntax error
          examples:
            application/json:
              {
                  "detail": "JSON parse error - Expecting ',' delimiter: line 4 column 2 (char 53)"
              }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X GET \
                    https://api.uanataca.com/api/v1/scratchcards/?registration_authority=123&sn=123456
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/scratchcards/?registration_authority=123&sn=123456"

                  response = requests.get(url)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/scratchcards/?registration_authority=123&sn=123456',
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        var request = await client.GetAsync("https://api.uanataca.com/api/v1/scratchcards/?registration_authority=123&sn=123456");
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
#############
  /api/v1/scratchcards/{id}:
    get: 
      summary: GET SCRATCHCARD
      tags:
        - Scratchcards
      description: Get details from a scratchcard.
      parameters:
        - in: path
          name: id
          type: string
          description: The scratchcard unique id
          required: true
      produces:
        - application/json       
      responses:
        200:
          description: Successful Response
          schema:  
            type: object
            properties:
              pk:
                type: number
                description: The scratchcard database id
              sn: 
                type: number
                description: The scratchcard serial number
              secrets:
                type: object
                description: Credentials associated to a scratchcard.
                properties:
                    erc:
                      type: string
                      description: A code specially used for revoking the associated certificate
                    enrollment_code:
                      description: The password required for logging into Uanataca services
                      type: string
                    pin:
                      type: string
                      description: The secret code used for certificate usage
                    puk:
                      type: string
                      description: A code required for unblocking the certificate
          examples:
            application/json:
                {
                    "pk": 1045,
                    "sn": "1200948",
                    "secrets": "{\"erc\": \"8117606937\", \"enrollment_code\": \",8cj6Ax2\", \"pin\": \"85376977\", \"puk\": \"86175206\"}",
                    "registration_authority": 121
                }
        404:
          description: Invalid scratchcard id
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "400",
                    "id": "c6972c3efdc6db8e",
                    "error": "No ScratchCard matches the given query."
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X GET \
                    https://api.uanataca.com/api/v1/scratchcards/1045/
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/scratchcards/1045/"

                  response = requests.get(url)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/scratchcards/1045/',
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        var request = await client.GetAsync("https://api.uanataca.com/api/v1/scratchcards/1200948/");
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }

#############
  /api/v1/scratchcards/get_first_unused:
    get: 
      summary: GET FIRST UNUSED SCRATCHCARD
      tags:
        - Scratchcards
      description: Get first unused scratchcard.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          schema:
            $ref: "#/definitions/FUScrObject"
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              pk:
                type: number
                description: The scratchcard database id
              sn: 
                type: number
                description: The scratchcard serial number
              secrets:
                type: object
                properties:
                    erc:
                      type: string
                      description: A code specially used for revoking the associated certificate
                    enrollment_code:
                      description: The password required for logging into Uanataca services
                      type: string
                    pin:
                      type: string
                      description: The secret code used for certificate usage
                    puk:
                      type: string
                      description: A code required for unblocking the certificate
              registration_authority:
                type: number
                description: The registration authority id the scratchcard is associated
          examples:
            application/json:
                {
                    "pk": 1193,
                    "sn": "1256948",
                    "secrets": "{\"erc\": \"6292998123\", \"enrollment_code\": \"_,463vt:\", \"pin\": \"08695572\", \"puk\": \"52351291\"}",
                    "registration_authority": 121
                }
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              detail:
                type: string
                description: JSON syntax error message
          examples:
            application/json:
                {
                    "detail": "JSON parse error - Expecting property name enclosed in double quotes: line 3 column 1 (char 14)"
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X GET \
                    https://api.uanataca.com/api/v1/scratchcards/get_first_unused/ \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "ra": 121
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/scratchcards/get_first_unused/"

                  payload = {
                    "ra": 121
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.get(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/scratchcards/get_first_unused/',
                    {
                      method: 'GET',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({ra: 121})
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        JObject json = JObject.Parse(@"{ra: 121}");
                        var getData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.GetAsync("https://api.uanataca.com/api/v1/scratchcards/get_first_unused/", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }

#############
  /api/v1/scratchcards/isused:
    post:
      summary: IS USED SCRATCHCARD
      tags:
        - Scratchcards
      description: Get the status of a known scratchcard.
      parameters:
        - in: "body"
          name: "body"
          schema:
            $ref: "#/definitions/IUScrObject"
          required: true      
      produces:
        - application/json     
      responses:
        200:
          description: Successful Response
          examples:
            text/plain:
                "true"
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              detail:
                type: string
                description: JSON syntax error
          examples:
            application/json:
                {
                    "detail": "JSON parse error - Expecting property name enclosed in double quotes: line 3 column 1 (char 22)"
                }
        500:
          description: Invalid scratchcard id
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "500",
                    "id": "168cfa712331f994",
                    "error": "ScratchCard matching query does not exist."
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://api.uanataca.com/api/v1/scratchcards/isused/ \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "sn": "1200948"
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/scratchcards/isused/"

                  payload = {
                    "sn": "1200948"
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.post(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/scratchcards/isused/',
                    {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({sn: '1200948'})
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        JObject json = JObject.Parse(@"{sn: '1200948'}");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PostAsync("https://api.uanataca.com/api/v1/scratchcards/isused/", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }

#############
  /api/v1/scratchcards/revoke:
    post: 
      summary: REVOKE SCRATCHCARD
      tags:
        - Scratchcards
      description: Revoke, suspend or activate certificates associated to the request that use the specified scratchcard.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          schema:
            $ref: "#/definitions/REVScrObject"
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              data:
                type: string
                description: The certificate associated to the revoked scratchard
              profile:
                type: string
                description: The certificate profile associated to the scratchcard
              subject:
                type: string
                description: The certificate subject information
              issuer:
                type: string
                description: The certificate issuer information
              valid_from:
                type: string
                description: The date when the certificate was enabled from (the format is YYYY-MM-DD)
              valid_to:
                type: string
                description: The date when the certificate was no longer enabled (the format is YYYY-MM-DD)
              serial_number:
                type: string
                description: The serial number associated to the scratchcard
              status:
                type: string
                description: The scratchcard status id 
              pk:
                type: string
                description: The request id associated to the scratchcard
              revocation_reason: 
                type: string
                description: The revocation reason id
              type:
                type: string
                description: The revocation type
          examples:
            application/json:
                [
                    {
                        "data": "MIIHyzCCBbOgAwIBAgIIdWWgCtrot88wDQYJKoZIhvcNAQELBQAwgb0xCzAJBgNVBAYTAkVTMUQwQgYDVQQHDDtCYXJjZWxvbmEgKHNlZSBjdXJyZW50IGFkZHJlc3MgYXQgd3d3LnVhbmF0YW...",
                        "profile": "PFnubeAF",
                        "subject": "CN=Name Surname1 Surname2, 2.5.4.5=IDCIT-TSTAPI74S23C129Y, 2.5.4.42=Name, 2.5.4.4=Surname1 Surname2, C=ES",
                        "issuer": "2.5.4.97=VATES-A66721499, CN=UANATACA CA1 DEVEL 2016, OU=AC-UANATACA, O=UANATACA S.A., L=Barcelona (see current address at www.uanataca.com/address), C=ES",
                        "valid_from": "2019-01-22T16:42:00Z",
                        "valid_to": "2019-01-23T16:42:00Z",
                        "serial_number": "0b7687af3c8a833f",
                        "status": 2,
                        "pk": 25139,
                        "revokation_reason": 1,
                        "type": "FIRSTISSUE"
                    }
                ]
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              detail:
                type: string
                description: JSON syntax error
          examples:
            application/json:
              {
                  "detail": "JSON parse error - Expecting ',' delimiter: line 3 column 2 (char 30)"
              }
        412:
          description: Invalid or missing parameters
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "418",
                    "id": "fef0a6c7023e67c6",
                    "error": "Invalid paramiters"
                }
        500:
          description: Invalid request id | Scratchcard has no associated request
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "500",
                    "id": "168cfa712331f994",
                    "error": "ScratchCard matching query does not exist."
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://api.uanataca.com/api/v1/scratchcards/revoke/ \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "scratchcard": "5053349",
                      "erc": "1551329333",
                      "reason": "UNSPECIFIED"
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/scratchcards/revoke/"

                  payload = {
                    "scratchcard": "5053349",
                    "erc": "1551329333",
                    "reason": "UNSPECIFIED"
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.post(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/scratchcards/revoke/',
                    {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        scratchcard: '5053349',
                        erc: '1551329333',
                        reason: 'UNSPECIFIED'
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        JObject json = JObject.Parse(@"{
                          scratchcard: '5053349',
                          erc: '1551329333',
                          reason: 'UNSPECIFIED'
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PostAsync("https://api.uanataca.com/api/v1/scratchcards/revoke/", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
#############
  /api/v1/scratchcards/whoami:
    post: 
      summary: WHOAMI
      tags:
        - Scratchcards
      description: 	Get the request associated to the scratchcard.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          schema:
            $ref: "#/definitions/WhoScrObject"
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            description: A JSON object containing the request information associated to a scratchcard
          examples:
            application/json:
                {
                    "pk": 25139,
                    "given_name": "Name",
                    "surname_1": "Surname1",
                    "surname_2": "Surname2",
                    "sex": null,
                    "id_document_type": "TIN",
                    "id_document_country": "IT",
                    "serial_number": "A1111111E",
                    "country_name": "ES",
                    "citizenship": null,
                    "residence": "ES",
                    "organization_email": null,
                    "email": "mail@domain",
                    "title": null,
                    "organization_name": null,
                    "organizational_unit_1": null,
                    "organizational_unit_2": null,
                    "organization_identifier": null,
                    "responsible_name": null,
                    "responsible_first_surname": null,
                    "responsible_second_surname": null,
                    "responsible_email": null,
                    "responsible_serial": null,
                    "responsible_position": null,
                    "subscriber_responsible_serial": null,
                    "administrative_unit": null,
                    "empowerment": null,
                    "representation": null,
                    "circumstances": null,
                    "limit": null,
                    "registration": null,
                    "process_application": null,
                    "entity_owner": null,
                    "entity_owner_serial_number": null,
                    "description": null,
                    "certificate_set": [],
                    "profile": "PFnubeAFCiudadano",
                    "scratchcard": "5053349",
                    "status": "ENROLLREADY",
                    "registering_user": {
                        "pk": 1,
                        "permission_profile": 1,
                        "registration_authority": 1,
                        "request": 235
                    },
                    "approving_user": {
                        "pk": 1,
                        "permission_profile": 1,
                        "registration_authority": 1,
                        "request": 235
                    },
                    "producing_user": null,
                    "registration_authority": 41,
                    "secure_element": 2,
                    "validity_time": "730",
                    "smartcard_sn": "",
                    "citizen_tax_number": "",
                    "birth_date": null,
                    "birth_country": null,
                    "birth_city": "",
                    "birth_province": "",
                    "birth_state": "",
                    "birth_district": "",
                    "birth_canton": "",
                    "id_document_description": "",
                    "id_document_issuer": "",
                    "organization_rol": null,
                    "professional_id_number": null,
                    "mobile_phone_number": "+34600112233",
                    "fix_phone_number": "",
                    "residence_address": "",
                    "residence_city": "",
                    "residence_province": "",
                    "residence_postal_code": "",
                    "residence_state": "",
                    "residence_district": "",
                    "residence_canton": "",
                    "organization_tax_number": null,
                    "organization_address": null,
                    "organization_city": null,
                    "organization_province": null,
                    "organization_country": null,
                    "organization_postal_code": null,
                    "organization_state": null,
                    "organization_url": null,
                    "responsible_legal_level": null,
                    "subscriber": null,
                    "responsible_legal_documents": null,
                    "special_conditions": null,
                    "responsible_registry_data": null,
                    "approving_rao": {
                        "pk": 1,
                        "given_name": "RAO_Name",
                        "surname_1": "RAO_Surname1",
                        "surname_2": "RAO_Surname2",
                        "certificate": {
                            "profile": "PERSONA_FISICA_SOFT",
                            "status": 0,
                            "valid_from": "2017-01-24T11:00:31Z",
                            "valid_to": "2020-01-24T11:00:31Z",
                            "valid": "VALID",
                            "revokation_reason": null,
                            "serial_number": "3ef3696d2939241d",
                            "subject": "CN=RAO_Name RAO_Surname1 RAO_Surname2, 2.5.4.5=u12345678, 2.5.4.42=RAO_Name, 2.5.4.4=RAO_Surname1, O=no presente, C=IT",
                            "data": "MIIIEDCCBfigAwIBAgIIPvNpbSk5JB0wDQYJKoZIhvcNAQELBQ...",
                            "issuer": "2.5.4.97=VATES-A66721499, CN=UANATACA CA1 DEVEL 2016, OU=AC-UANATACA, O=UANATACA S.A., L=Barcelona (see current address at www.uanataca.com/address), C=ES"
                        },
                        "id_document_number": "A22222222W",
                        "id_document_description": "",
                        "id_document_issuer": "",
                        "registration_authority": [
                            1,
                            2
                        ],
                        "registration_authority_master": 1
                    },
                    "producing_rao": null,
                    "id_document_number": "",
                    "id_responsible_document_type": null,
                    "id_responsible_document_country": null,
                    "id_responsible_document_number": null,
                    "organizational_unit_3": null
                }
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              detail:
                type: string
                description: JSON syntax error
          examples:
            application/json:
              {
                  "detail": "JSON parse error - Expecting ',' delimiter: line 3 column 2 (char 30)"
              }
        412:
          description: Invalid or missing parameters
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "418",
                    "id": "d516ca618acc4e5b",
                    "error": "Invalid parameters"
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://api.uanataca.com/api/v1/scratchcards/whoami/ \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "scratchcard": "5053349",
                      "erc": ",_3A26F!"
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/scratchcards/whoami/"

                  payload = {
                    "scratchcard": "5053349",
                    "erc": ",_3A26F!"
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.post(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/scratchcards/whoami/',
                    {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        scratchcard: '5053349',
                        erc: ',_3A26F!'
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        JObject json = JObject.Parse(@"{
                          scratchcard: '5053349',
                          erc: ',_3A26F!'
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PostAsync("https://api.uanataca.com/api/v1/scratchcards/whoami/", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
#############
  /api/v1/scratchcards/move:
    post: 
      summary: MOVE SCRATCHCARDS
      tags:
        - Scratchcards
      description: Move scratchcards from an ra to another one.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          schema:
            $ref: "#/definitions/MoveScrObject"
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              moved:
                type: number
                description: The number of moved scratchcards
              details:
                type: string
                description: An associated message (appears in case of any inconsistency)
          examples:
            application/json:
                {
                    "moved": 1000
                }
        403:
          description: Permission denied
          schema:
            type: object
            properties:
              moved:
                type: number
                description: The amount of moved scratchcards (0)
              details:
                type: string
                description: An associated message (appears in case of any inconsistency)
          examples:
            application/json:
                {
                    "moved": 0,
                    "details": "Permission Denied"
                }
        500:
          description: Bad Request (JSON syntax error)
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "500",
                    "id": "7907af27ea00b32e",
                    "error": "JSON parse error - Expecting ',' delimiter: line 4 column 2 (char 34)"
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://api.uanataca.com/api/v1/scratchcards/move/ \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "from_ra": 364,
                      "to_ra": 121,
                      "amount": 1000
                     }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/scratchcards/move/"

                  payload = {
                    "from_ra": 364,
                    "to_ra": 121,
                    "amount": 1000
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.post(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/scratchcards/move/',
                    {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        from_ra: 364,
                        to_ra: 121,
                        amount: 1000
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        JObject json = JObject.Parse(@"{
                          from_ra: 364,
                          to_ra: 121,
                          amount: 1000
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PostAsync("https://api.uanataca.com/api/v1/scratchcards/move/", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }

###### registration authority ######
###############################################################################
  /api/v1/registrationauthorities:
    post:
      summary: CREATE RA
      tags:
        - Registration Authority
      description: Create a new registration authority.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          schema:
            $ref: "#/definitions/UpdateRAObject"
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              pk:
                type: number
                description: "The created RA unique id"
              name: 
                type: string
                description: "The created RA name"
              parent:
                type: number
                description: "The created RA's parent unique id"
              operators: 
                description: "An object with information about operators belonging the created RA (void)"
                type: object
                items:
                  type: string
              enabled_from:
                description: "The date when the created RA is enabled from (the format is YYYY-MM-DD)"
                type: string
              enabled_until:
                description: "The date when the created RA will be no longer enabled (the format is YYYY-MM-DD)" 
                type: string
              organization_tax_number:
                description: "The tax number of the organization"
                type: string
              organization_name:
                description: "The organization name" 
                type: string
              responsible_name:
                description: "The created RA responsible name"
                type: string
              responsible_first_surname:
                description: "The created RA responsible first surname" 
                type: string
              responsible_second_surname:
                description: "The created RA responsible second surname"
                type: string
              responsible_serial:
                description: "The created RA responsible serial" 
                type: string
              email: 
                type: string
                description: "A valid email address"
              fix_phone_number:
                description: "A phone number"
                type: string
              city: 
                type: string
                description: "The city where the created RA is located"
              postal_code:
                type: string
                description: "The postal code of the city where the created RA is located"
              province: 
                type: string
                description: "The province of the city where the created RA is located"
              url:
                type: string
                description: "A web url for the created RA"
              address: 
                type: string
                description: "The city address"
              state:
                type: string
                description: "The state the city belongs to"
              country: 
                type: string
                description: "The country where the created RA is located"
              enable_external_auth: 
                type: boolean
                description: "VideoID external authentication mode enabling/disabling check"
              videoid_enabled: 
                type: boolean
                description: "VideoID enabling/disabling check"
              videoid_provider: 
                type: integer
                description: "VideoID provider indicator"
          examples:
            application/json:
              {
                  "pk": 121,
                  "name": "RA Name",
                  "parent": 1,
                  "operators": [],
                  "enabled_from": "2020-07-20",
                  "enabled_until": "2025-07-20",
                  "organization_tax_number": "43242414213",
                  "organization_name": "Name_Org",
                  "responsible_name": "Name_Resp",
                  "responsible_first_surname": "Sur1_Resp",
                  "responsible_second_surname": Sur2_Resp,
                  "responsible_serial": "X1111111C",
                  "email": "mail@domain.com",
                  "fix_phone_number": "+34333333333",
                  "mobile_phone_number": "+34555555555",
                  "city": City Name,
                  "postal_code": "1000000",
                  "province": "Province_Name",
                  "url": "http://www.organization.com",
                  "address": null,
                  "state": null,
                  "country": "ES",
                  "enable_external_auth": false,
                  "videoid_enabled": true,
                  "videoid_provider": 2
              }
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              detail:
                type: string
                description: JSON syntax error
          examples:
            application/json:
              {
                  "detail": "JSON parse error - Expecting ',' delimiter: line 12 column 5 (char 361)"
              }
        500:
          description: Invalid or missing parameters | Permission denied
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "500",
                    "id": "fcb7f0f60cba631b",
                    "error": "{'name': [u'Registration Authority with this RA Name already exists.']}"
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://api.uanataca.com/api/v1/registrationauthorities/ \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "name": "RA Name",
                      "parent": "1",
                      "enabled_from": "2020-07-20",
                      "enabled_until": "2025-07-20",
                      "organization_tax_number": "A9999999W",
                      "organization_name": "Name_Org",
                      "responsible_name": "Name_Resp",
                      "responsible_first_surname": "Sur1_Resp",
                      "responsible_second_surname": "Sur2_Resp",
                      "responsible_serial": "X1111111C",
                      "email": "mail@domain.com",
                      "fix_phone_number": "+34333333333",
                      "address": "Address Name",
                      "city": "City Name",
                      "postal_code": "1000000",
                      "province": "Province_Name",
                      "url": "http://www.organization.com",
                      "country": "ES"
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/registrationauthorities/"

                  payload = {
                    "name": "RA Name",
                    "parent": "1",
                    "enabled_from": "2020-07-20",
                    "enabled_until": "2025-07-20",
                    "organization_tax_number": "A9999999W",
                    "organization_name": "Name_Org",
                    "responsible_name": "Name_Resp",
                    "responsible_first_surname": "Sur1_Resp",
                    "responsible_second_surname": "Sur2_Resp",
                    "responsible_serial": "X11111111C",
                    "email": "mail@domain.com",
                    "fix_phone_number": "+34333333333",
                    "address": "Address Name",
                    "city": "City Name",
                    "postal_code": "1000000",
                    "province": "Province_Name",
                    "url": "http://www.organization.com",
                    "country": "ES"
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.post(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/registrationauthorities/',
                    {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        name: 'RA Name',
                        parent: '1',
                        enabled_from: '2020-07-20',
                        enabled_until: '2025-07-20',
                        organization_tax_number: 'A9999999W',
                        organization_name: 'Name_Org',
                        responsible_name: 'Name_Resp',
                        responsible_first_surname: 'Sur1_Resp',
                        responsible_second_surname: 'Sur2_Resp',
                        responsible_serial: 'X11111111C',
                        email: 'mail@domain.com',
                        fix_phone_number: '+34333333333',
                        address: 'Address Name',
                        city: 'City Name',
                        postal_code: '1000000',
                        province: 'Province_Name',
                        url: 'http://www.organization.com',
                        country: 'ES'
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        JObject json = JObject.Parse(@"{
                          name: 'RA Name',
                          parent: '1',
                          enabled_from: '2020-07-20',
                          enabled_until: '2025-07-20',
                          organization_tax_number: 'A9999999W',
                          organization_name: 'Name_Org',
                          responsible_name: 'Name_Resp',
                          responsible_first_surname: 'Sur1_Resp',
                          responsible_second_surname: 'Sur2_Resp',
                          responsible_serial: 'X11111111C',
                          email: 'mail@domain.com',
                          fix_phone_number: '+34333333333',
                          address: 'Address Name',
                          city: 'City Name',
                          postal_code: '1000000',
                          province: 'Province_Name',
                          url: 'http://www.organization.com',
                          country: 'ES'
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PostAsync("https://api.uanataca.com/api/v1/registrationauthorities/", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }     
#############
    get:
      summary: LIST RAs
      tags:
        - Registration Authority
      description: Get the list of registration authorities
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              count:
                type: string
                description: The number of associated RAs 
              next:
                type: string
                description: The next list page endpoint
              previous:
                type: string
                description: The previous list page endpoint                
              results:
                type: object
                description: A JSON object with the set of operators for each listed RA   
          examples:
            application/json:
                {
                    "count": 40,
                    "next": "https://api.uanataca.com/api/v1/registrationauthorities/?page=2",
                    "previous": null,
                    "results": [
                        {
                            "pk": 121,
                            "name": "RA Name",
                            "parent": null,
                            "operators": [
                                {
                                    "pk": 13,
                                    "permission_profile": 6,
                                    "registration_authority": 1,
                                    "request": 235
                                },
                                {
                                    "pk": 1,
                                    "permission_profile": 1,
                                    "registration_authority": 1,
                                    "request": 240
                                },
                                {
                                    "pk": 8,
                                    "permission_profile": 1,
                                    "registration_authority": 1,
                                    "request": 312
                                }
                            ]
                        },
                        {
                            "pk": 150,
                            "name": "Another RA",
                            "parent": null,
                            "operators": [
                                {
                                    "pk": 21,
                                    "permission_profile": 10,
                                    "registration_authority": 2,
                                    "request": 120
                                },
                                {
                                    "pk": 29,
                                    "permission_profile": 1,
                                    "registration_authority": 2,
                                    "request": 77
                                },
                                {
                                    "pk": 9,
                                    "permission_profile": 4,
                                    "registration_authority": 2,
                                    "request": 95
                                }
                            ]
                        },
                        ...
                    ]
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X GET \
                    https://api.uanataca.com/api/v1/registrationauthorities/
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/registrationauthorities/"

                  response = requests.get(url)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/registrationauthorities/',
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        var request = await client.GetAsync("https://api.uanataca.com/api/v1/registrationauthorities/");
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  } 
#############
  /api/v1/registrationauthorities/{id}:
    get:
      summary: GET RA
      tags:
        - Registration Authority
      description: Gets data from a specific RA.
      consumes:
        - application/json      
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          description: The id of the registration authority
          required: true
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              pk:
                type: string
                description: The requested RA unique id
              name:
                type: string
                description: The RA name
              parent:
                type: string
                description: The parent RA unique id
              operators:
                type: array
                items:
                  type: object
                  description: A JSON array of objects with the set operators for the requested RA                
          examples:
            application/json:
                  {
                      "pk": 121,
                      "name": "RA Name",
                      "parent": null,
                      "operators": [
                          {
                              "pk": 21,
                              "permission_profile": 10,
                              "registration_authority": 2,
                              "request": 120
                          },
                          {
                              "pk": 29,
                              "permission_profile": 18,
                              "registration_authority": 2,
                              "request": 132
                          },
                          {
                              "pk": 9,
                              "permission_profile": 4,
                              "registration_authority": 2,
                              "request": 255
                          }
                      ]
                  }
        500:
          description: Invalid RA
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "500",
                    "id": "61f0ac735c8a40bd",
                    "error": "You do not have permission to perform this action."
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X GET \
                    https://api.uanataca.com/api/v1/registrationauthorities/121/
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/registrationauthorities/121/"

                  response = requests.get(url)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/registrationauthorities/121/',
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        var request = await client.GetAsync("https://api.uanataca.com/api/v1/registrationauthorities/121/", null);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  } 
#############
    put:
      summary: UPDATE RA
      tags:
        - Registration Authority
      description: Update the info about a registration authority.
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          description: The id of the registration authority
          required: true
        - in: "body"
          name: "body"
          schema:
            $ref: "#/definitions/UpdateRAObject"
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              pk:
                type: number
              name: 
                type: string
              parent:
                type: number
              operators: 
                type: array
                items:
                  type: string
              enabled_from:
                type: string
              enabled_until: 
                type: string
              organization_tax_number:
                type: string
              organization_name: 
                type: string
              responsible_name:
                type: string
              responsible_first_surname: 
                type: string
              responsible_second_surname:
                type: string
              responsible_serial: 
                type: string
              email: 
                type: string
              fix_phone_number:
                type: string
              fix_mobile_number:
                type: string
              city: 
                type: string
              postal_code:
                type: string
              province: 
                type: string
              url:
                type: string
              address: 
                type: string
              state:
                type: string
              country: 
                type: string
              enable_external_auth: 
                type: string
          examples:
            application/json:
              {
                  "pk": 121,
                  "name": "RA Name",
                  "parent": 1,
                  "operators": [],
                  "enabled_from": "2020-07-20",
                  "enabled_until": "2028-07-20",
                  "organization_tax_number": "43242414213",
                  "organization_name": "Name_Org",
                  "responsible_name": "Name_Resp",
                  "responsible_first_surname": "Sur1_Resp",
                  "responsible_second_surname": Sur2_Resp,
                  "responsible_serial": "X1111111C",
                  "email": "new_mail@domain.com",
                  "fix_phone_number": "+34333333333",
                  "mobile_phone_number": "+34555555555",
                  "city": City Name,
                  "postal_code": "1000000",
                  "province": "Province_Name",
                  "url": "http://www.organization.com",
                  "address": null,
                  "state": null,
                  "country": "ES",
                  "enable_external_auth": false
              }
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              detail:
                type: string
                description: JSON syntax error
          examples:
            application/json:
              {
                  "detail": "JSON parse error - Expecting ',' delimiter: line 12 column 5 (char 361)"
              }
        500:
          description: Invalid or missing parameters
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "500",
                    "id": "61f0ac735c8a40bd",
                    "error": "You do not have permission to perform this action."
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X PUT \
                    https://api.uanataca.com/api/v1/registrationauthorities/121/ \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "enabled_until": "2028-07-20",
                      "email": "new_mail@domain.com"
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/registrationauthorities/121/"

                  payload = {
                    "enabled_until": "2028-07-20",
                    "new_email": "mail@domain.com"
                   }

                  headers = {"Content-Type": "application/json"}

                  response = requests.put(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/registrationauthorities/121/',
                    {
                      method: 'PUT',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        enabled_until: '2028-07-20',
                        email: 'new_mail@domain.com'
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        JObject json = JObject.Parse(@"{
                          enabled_until: '2028-07-20',
                          email: 'new_mail@domain.com'
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PostAsync("https://api.uanataca.com/api/v1/registrationauthorities/121/", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  } 
###### registration authority officer ######
###############################################################################

  /api/v1/rao:
    post:
      summary: CREATE RAO
      tags:
        - Registration Authority Officer
      description: Create a new registration authority officer.
      consumes:
        - application/json      
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          schema:
            $ref: "#/definitions/UpdateRAOObject"
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              pk:
                type: number
                description: The created RAO's unique id
              given_name: 
                type: string
                description: The created RAO's given name
              surname_1:
                type: number
                description: The created RAO's first surname
              surname_2: 
                type: string
                description: The created RAO's second surname
              certificate:
                type: object
                description: An object with information about the RAO's request certificate
              id_document_number: 
                type: string
                description: The created RAO's id document number 
              id_document_description:
                type: string
                description: The created RAO's document description 
              id_document_issuer: 
                type: string
                description: The created RAO's document issuer
              registration_authority:
                type: array
                description: The created RAO's registration authorities where he can operate
                items:
                  type: number
              registration_authority_master: 
                description: The created RAO's master registration authority id
                type: string
              id_identificator:
                type: boolean
          examples:
            application/json:
              {
                    "pk": 1400,
                    "given_name": "RAO_Name",
                    "surname_1": "RAO_Surname1",
                    "surname_2": "RAO_Surname2",
                    "certificate": {
                        "profile": "EXTERNAL",
                        "status": 0,
                        "valid_from": "2020-01-01T16:31:00",
                        "valid_to": "2022-01-01T16:31:00",
                        "valid": "UNKNOW",
                        "revokation_reason": null,
                        "serial_number": "4501b05b35da0b54",
                        "subject": "CN=RAO_Name RAO_Surname1 RAO_Surname2, 2.5.4.5=IDCES-12432143313213, 2.5.4.42=RAO_Name, 2.5.4.4=RAO_Surname1 RAO_Surname2, C=ES",
                        "data": "MIIHyzCCBbOgAwIBAgIIdWWgCtrot88wDQYJKoZIhvcNAQELBQAwgb0xCzAJBgNVBAYTAkVTMUQwQgYDVQQHDDtCYXJjZWxvbmEgKHNlZSBjdXJyZW50IGFkZHJlc3MgYXQgd3d3LnVhbmF0YWNhLmNvbS9hZGR...",
                        "issuer": "2.5.4.97=VATES-A66721499, CN=UANATACA CA1 DEVEL 2016, OU=AC-UANATACA, O=UANATACA S.A., L=Barcelona (see current address at www.uanataca.com/address), C=ES"
                    },
                    "id_document_number": "Y8888888E",
                    "id_document_description": null,
                    "id_document_issuer": null,
                    "registration_authority": [121, 122, 123],
                    "registration_authority_master": 1,
                    "is_identificator": false

              }
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              detail:
                type: string
                description: JSON syntax error
          examples:
            application/json:
              {
                  "detail": "JSON parse error - Expecting ',' delimiter: line 12 column 5 (char 361)"
              }
        500:
          description: Invalid or missing parameters | Permission denied
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "500",
                    "id": "572b9094bafb7cc3",
                    "error": "You do not have permission to perform this action."
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://api.uanataca.com/api/v1/rao/ \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "registration_authority_master": 1,
                      "registration_authority": ["121", "122", "123"],
                      "certificate": "25714",
                      "given_name": "RAO_Name",
                      "surname_1": "RAO_Surname1",
                      "surname_2": "RAO_Surname2",
                      "id_document_number": "Y8888888E",
                      "email": "mail@domain"
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/rao/"

                  payload = {
                    "registration_authority_master": 1,
                    "registration_authority": ["121", "122", "123"],
                    "certificate": "25714",
                    "given_name": "RAO_Name",
                    "surname_1": "RAO_Surname1",
                    "surname_2": "RAO_Surname2",
                    "id_document_number": "Y8888888E",
                    "email": "mail@domain"
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.post(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/rao/',
                    {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        registration_authority_master: 1,
                        registration_authority: ["121", "122", "123"],
                        certificate: '25714',
                        given_name: 'RAO_Name',
                        surname_1: 'RAO_Surname1',
                        surname_2: 'RAO_Surname2',
                        id_document_number: 'Y8888888E',
                        email: 'mail@domain'
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        JObject json = JObject.Parse(@"{
                          registration_authority_master: 1,
                          registration_authority: ["121", "122", "123"],
                          certificate: '25714',
                          given_name: 'RAO_Name',
                          surname_1: 'RAO_Surname1',
                          surname_2: 'RAO_Surname2',
                          id_document_number: 'Y8888888E',
                          email: 'mail@domain'
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PostAsync("https://api.uanataca.com/api/v1/rao/", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }

#############
    get:
      summary: LIST RAOs
      tags:
        - Registration Authority Officer
      description: "Get the list of RAOs. The result can be filtered with the following query parameters: given_name, surname_1, surname_2, certificate, registration_authority, registration_authority_master"
      produces:
        - application/json
      parameters:
        - in: query
          name: filter1
          type: string
          description: Filter string
        - in: query
          name: filter2
          type: string
          description: Filter string
        - in: query
          name: filterN
          type: string
          description: Filter string
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              count:
                type: string
                description: The number of associated RAOs 
              next:
                type: string
                description: The list next page endpoint
              previous:
                type: string
                description: The list previous page endpoint                
              results:
                type: array
                description: Array of JSON objects containing RAOs information
                items:
                  type: object
          examples:
            application/json:
                {
                    "count": 25,
                    "next": "null",
                    "previous": null,
                    "results": [
                        {
                            "pk": 1400,
                            "given_name": "RAO_Name",
                            "surname_1": "RAO_Surname1",
                            "surname_2": "RAO_Surname2",
                            "certificate": {
                                "profile": "EXTERNAL",
                                "status": 0,
                                "valid_from": "2020-01-01T16:31:00Z",
                                "valid_to": "2022-01-01T16:31:00Z",
                                "valid": "VALID",
                                "revokation_reason": null,
                                "serial_number": "4501b05b35da0b54",
                                "subject": "CN=Gnigni Bubu, 2.5.4.5=IDCES-12432143313213, 2.5.4.42=Gnigni, 2.5.4.4=Bubu, C=ES",
                                "data": "MIIHyzCCBbOgAwIBAgIIdWWgCtrot88wDQYJKoZIhvcNAQELBQAwgb0xCzAJBgNVBAYTAkVTMUQwQgYDVQQHDDtCYXJjZWxvbmEgKHNlZSBjdXJyZW50IGFkZHJlc3MgYXQgd3d3LnVhbmF0YWNhLmNvbS9hZGR...",
                                "issuer": "2.5.4.97=VATES-A66721499, CN=UANATACA CA1 DEVEL 2016, OU=AC-UANATACA, O=UANATACA S.A., L=Barcelona (see current address at www.uanataca.com/address), C=ES"
                            },
                            "id_document_number": "Y8888888E",
                            "id_document_description": null,
                            "id_document_issuer": null,
                            "registration_authority": [2 , 3],
                            "registration_authority_master": 1,
                            "is_identificator": false
                        }
                    ]
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X GET \
                    'https://api.uanataca.com/api/v1/rao?filter1=registration_authority&filter2=given_name'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/rao/"

                  query = {
                    "filter1": "registration_authority",
                    "filter2": "given_name"
                  }

                  response = requests.get(url, params=query)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const query = new URLSearchParams({
                    filter1: 'registration_authority',
                    filter2: 'given_name'
                  }).toString();

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/rao?' + query,
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        var request = await client.GetAsync("https://api.uanataca.com/api/v1/rao?filter1=registration_authority&filter2=given_name");
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
#############
  /api/v1/rao/{id}:
    get:
      summary: GET RAO
      tags:
        - Registration Authority Officer
      description: Get information about a RAO.
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          description: The RAO's unique identifier
          required: true
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              pk:
                type: string
                description: The requested RA unique id
              given_name:
                type: string
                description: The RAO's name
              surname_1:
                type: string
                description: The RAO's first surname
              surname_2:
                type: string
                description: The RAO's second surname
              certificate:
                type: object
                description: A JSON object with information associated to the RAO's certificate
              id_document_number:
                type: string
                description: The RAO's id document number
              id_document_description:
                type: string
                description: The RAO's id document description
              id_document_issuer:
                type: string
                description: The RAO's id document issuer name
              registration_authority:
                type: array
                description: The list of the RAs where the RAO can operate
              registration_authority_master:
                type: number
                description: The master registration authority id   
              is_identificator: 
                type: boolean
          examples:
            application/json:
                {
                    "pk": 219,
                    "given_name": "RAO_Name",
                    "surname_1": "RAO_Surname1",
                    "surname_2": "RAO_Surname2",
                    "certificate": {
                        "profile": "EXTERNAL",
                        "status": 0,
                        "valid_from": "2019-01-28T16:31:00Z",
                        "valid_to": "2021-01-27T16:31:00Z",
                        "valid": "VALID",
                        "revokation_reason": null,
                        "serial_number": "4501b05b35da0b54",
                        "subject": "CN=RAO_Name RAO_Surname1 RAO_Surname2, 2.5.4.5=IDCES-12432143313213, 2.5.4.42=RAO_Name, 2.5.4.4=RAO_Surname1 RAO_Surname2, C=ES",
                        "data": "MIIHyzCCBbOgAwIBAgIIdWWgCtrot88wDQYJKoZIhvcNAQELBQAwgb0xCzAJBgNVBAYTAkVTMUQwQgYDVQQHDDtCYXJjZWxvbmEgKHNlZSBjdXJyZW50IGFkZHJlc3MgYXQgd3d3LnVhbmF0YWNhLmNvbS9hZGR...",
                        "issuer": "2.5.4.97=VATES-A66721499, CN=UANATACA CA1 DEVEL 2016, OU=AC-UANATACA, O=UANATACA S.A., L=Barcelona (see current address at www.uanataca.com/address), C=ES"
                    },
                    "id_document_number": "12354232414",
                    "id_document_description": null,
                    "id_document_issuer": null,
                    "registration_authority": [2, 3],
                    "registration_authority_master": 1,
                    "is_identificator": false
                }
        500:
          description: Invalid RAO
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "500",
                    "id": "dcd61c1df53e6276",
                    "error": "Rao matching query does not exist."
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X GET \
                    https://api.uanataca.com/api/v1/rao/1400/
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/rao/1400/"

                  response = requests.get(url)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/rao/1400/',
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        var request = await client.GetAsync("https://api.uanataca.com/api/v1/rao/1400/");
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }

#############
    put:
      summary: UPDATE RAO
      tags:
        - Registration Authority Officer
      description: Update information about a RAO.
      consumes:
        - application/json      
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          schema:
            $ref: "#/definitions/UpdateRAOObject"
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              pk:
                type: string
                description: The requested RA unique id
              given_name:
                type: string
                description: The RAO's name
              surname_1:
                type: string
                description: The RAO's first surname
              surname_2:
                type: string
                description: The RAO's second surname
              certificate:
                type: object
                description: A JSON object with information associated to the RAO's certificate
              id_document_number:
                type: string
                description: The RAO's id document number
              id_document_description:
                type: string
                description: The RAO's id document description
              id_document_issuer:
                type: string
                description: The RAO's id document issuer name
              registration_authority:
                type: array
                description: The list of the RAs where the RAO can operate
              registration_authority_master:
                type: number
                description: The master registration authority id   
              is_identificator: 
                type: boolean
          examples:
            application/json:
              {
                    "pk": 1400,
                    "given_name": "RAO_NewName",
                    "surname_1": "RAO_Surname1",
                    "surname_2": "RAO_Surname2",
                    "certificate": {
                        "profile": "EXTERNAL",
                        "status": 0,
                        "valid_from": "2020-01-01T16:31:00",
                        "valid_to": "2022-01-01T16:31:00",
                        "valid": "UNKNOW",
                        "revokation_reason": null,
                        "serial_number": "4501b05b35da0b54",
                        "subject": "CN=RAO_Name RAO_Surname1 RAO_Surname2, 2.5.4.5=IDCES-12432143313213, 2.5.4.42=RAO_Name, 2.5.4.4=RAO_Surname1 RAO_Surname2, C=ES",
                        "data": "MIIHyzCCBbOgAwIBAgIIdWWgCtrot88wDQYJKoZIhvcNAQELBQAwgb0xCzAJBgNVBAYTAkVTMUQwQgYDVQQHDDtCYXJjZWxvbmEgKHNlZSBjdXJyZW50IGFkZHJlc3MgYXQgd3d3LnVhbmF0YWNhLmNvbS9hZGR...",
                        "issuer": "2.5.4.97=VATES-A66721499, CN=UANATACA CA1 DEVEL 2016, OU=AC-UANATACA, O=UANATACA S.A., L=Barcelona (see current address at www.uanataca.com/address), C=ES"
                    },
                    "id_document_number": "Y8888888E",
                    "id_document_description": null,
                    "id_document_issuer": null,
                    "registration_authority": [2, 3],
                    "registration_authority_master": 1,
                    "is_identificator": false
              }
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              detail:
                type: string
                description: JSON syntax error
          examples:
            application/json:
              {
                  "detail": "JSON parse error - Expecting ',' delimiter: line 12 column 5 (char 361)"
              }
        500:
          description: Invalid or missing parameters | Permission denied
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "500",
                    "id": "572b9094bafb7cc3",
                    "error": "You do not have permission to perform this action."
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X PUT \
                    https://api.uanataca.com/api/v1/rao/1400/ \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "given_name": "RAO_NewName"
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/rao/1400/"

                  payload = {
                    "given_name": "RAO_NewName"
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.put(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/rao/1400/',
                    {
                      method: 'PUT',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        given_name: 'RAO_NewName'
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        JObject json = JObject.Parse(@"{
                          given_name: 'RAO_NewName'
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PutAsync("https://api.uanataca.com/api/v1/rao/1400/", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }

###### registration authority user ######
###############################################################################
  /api/v1/users:
    post:
      summary: CREATE USER
      tags:
        - Users
      description: Create a new user.
      consumes:
        - application/json      
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          schema:
              $ref: "#/definitions/CreateUserObject"
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              pk:
                type: number
                description: The user id
              permission_profile:
                type: string
                description: The user permission profile id
              registration_authority:
                type: string
                description: The user associated registration authority id 
              request:
                type: string
                description: The user associated request id               
          examples:
            application/json:
                {
                    "pk": 221,
                    "permission_profile": 18,
                    "registration_authority": 1,
                    "request": 255
                }
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              detail:
                type: string
                description: JSON parse error message
          examples:
            application/json:
              {
                  "detail": "JSON parse error - Expecting ',' delimiter: line 3 column 31 (char 69)"
              }
        500:
          description: Invalid or missing parameters | Permission denied
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "500",
                    "id": "a278e41eebf8c505",
                    "error": "You do not have permission to perform this action."
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://api.uanataca.com/api/v1/users/ \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "registration_authority": 1,
                      "permission_profile": 18,
                      "request": 255,
                      "rao": 1400
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/users/"

                  payload = {
                    "registration_authority": 1,
                    "permission_profile": 18,
                    "request": 255,
                    "rao": 1400
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.post(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/users/',
                    {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        registration_authority: 1,
                        permission_profile: 18,
                        request: 255,
                        rao: 1400
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        JObject json = JObject.Parse(@"{
                          registration_authority: 1,
                          permission_profile: 18,
                          request: 255,
                          rao: 1400
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PostAsync("https://api.uanataca.com/api/v1/users/", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
#############
    get:
      summary: LIST USERS
      tags:
        - Users
      description: Gets the list of users.
      produces:
        - application/json
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              count:
                type: number
                description: The number of associated users
              next:
                type: string
                description: The list next page endpoint
              previous:
                type: string
                description: The list previous page endpoint      
              results:
                type: array
                items:
                  type: object
                  description: Array of JSON objects containing information about users
                  
          examples:             
            application/json:
                {
                    "count": 7,
                    "next": "https://api.uanataca.com/api/v1/users/?page=2",
                    "previous": null,
                    "results": [
                        {
                            "pk": 221,
                            "permission_profile": 18,
                            "registration_authority": 1,
                            "request": 255
                        },
                        {
                            "pk": 222,
                            "permission_profile": 17,
                            "registration_authority": 1,
                            "request": 162
                        },
                        {
                            "pk": 245,
                            "permission_profile": 17,
                            "registration_authority": 2,
                            "request": 333
                        },
                        {
                            "pk": 251,
                            "permission_profile": 1,
                            "registration_authority": 2,
                            "request": 347
                        },
                        ...
                    ]
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X GET \
                    https://api.uanataca.com/api/v1/users/
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/users/"

                  response = requests.get(url)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/users/',
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        var request = await client.GetAsync("https://api.uanataca.com/api/v1/users/");
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
#############
  /api/v1/users/{id}:
    get:
      summary: GET USER
      tags:
        - Users
      description: Get information about an user.
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          description: The User's unique identifier
          required: true
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              pk:
                type: string
                description: The user unique id
              permission_profile:
                type: string
                description: The permission profile id associated to this user
              request:
                type: string
                description: The request id
              rao:
                type: string
                description: The RAO id  
          examples:
              application/json:
                  {
                      "pk": 36,
                      "permission_profile": 18,
                      "registration_authority": 41,
                      "request": 787
                  }
        500:
          description: Invalid or missing parameters | Permission denied
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "500",
                    "id": "7710a1144589dcd4",
                    "error": "User matching query does not exist."
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X GET \
                    https://api.uanataca.com/api/v1/users/36/
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/users/36/"

                  response = requests.get(url)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/users/36/',
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        var request = await client.GetAsync("https://api.uanataca.com/api/v1/users/36/");
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
#############
    put:
      summary: UPDATE USER
      tags:
        - Users
      description: Update a new user.
      consumes:
        - application/json      
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          schema:
              $ref: "#/definitions/UpdateUserObject"
        - in: path
          name: id
          type: string
          description: The User's unique identifier
          required: true
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              pk:
                type: number
                description: The user id
              permission_profile:
                type: string
                description: The user permission profile id
              registration_authority:
                type: string
                description: The user associated registration authority id 
              request:
                type: string
                description: The user associated request id               
          examples:
            application/json:
                {
                    "pk": 221,
                    "permission_profile": 18,
                    "registration_authority": 1,
                    "request": 150
                }
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              detail:
                type: string
                description: JSON parse error message
          examples:
            application/json:
              {
                  "detail": "JSON parse error - Expecting ',' delimiter: line 3 column 31 (char 69)"
              }
        500:
          description: Invalid or missing parameters | Permission denied
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "500",
                    "id": "a278e41eebf8c505",
                    "error": "You do not have permission to perform this action."
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X PUT \
                    https://api.uanataca.com/api/v1/users/ \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "request": 150
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/users/"

                  payload = {
                    "request": 150
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.put(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    'https://api.uanataca.com/api/v1/users/',
                    {
                      method: 'PUT',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        request: 150
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Security.Cryptography.X509Certificates;
                  
                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
                      HttpClientHandler handler = new HttpClientHandler();
                      
                      handler.ClientCertificates.Add(clientCert);
                      
                      using (var client = new HttpClient(handler))
                      {
                        JObject json = JObject.Parse(@"{
                          request: 150
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PutAsync("https://api.uanataca.com/api/v1/users/", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
###### eIDAS VideoID#####
###############################################################################

  /api/v1/requests/{id_request}/upload_videoid_evidence:
    post: 
      summary: UPLOAD DOCUMENT
      tags:
        - eIDAS VideoID
      description: Upload the required documentation for certificate issuance.
      produces:
        - application/json
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: id_request
          type: string
          description: The unique identifier of the Request
          required: true
        - in: formData
          name: document
          description: The file to be uploaded
          required: true
          type: string
        - in: formData
          name: label
          description: Label assigned to document
          required: true
          type: string
      responses:
        201:
          description: Successful Response
          schema:
            type: object
            properties:
              pk:
                type: number
                description: The document database id
              type: 
                type: number
                description: The uploaded document type
          examples:
            application/json:
                {
                    "pk": 48312,
                    "type": "videoid_evidence"
                }

###### External VideoID ######
###############################################################################

  /api/v1/requests/{id_request}/validate_videoid:
    post: 
      summary: VALIDATE VIDEO ID REQUEST
      tags:
        - External VideoID
      description: "Validation of a Video ID Request"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
      - in: path
        name: id_request
        type: string
        description: The Request unique identifier
        required: true
      - in: "body"
        name: "body"
        schema:
          $ref: "#/definitions/ValidateReqObject_VID"
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            description: The JSON object with full information associated to the approved request
          examples:
            application/json:
               {
                  "secrets": {
                      "puk": "38812452",
                      "enrollment_code": ".R4P9qgA",
                      "pin": "31945152",
                      "erc": "3417062505"
                  },
                  "request": {
                      "pk": 45013,
                      "given_name": "Name",
                      "surname_1": "Surname1",
                      "surname_2": "Surname2",
                      "sex": null,
                      "id_document_type": "IDC",
                      "id_document_country": "ES",
                      "serial_number": "A9999999E",
                      "country_name": "ES",
                      "citizenship": null,
                      "residence": null,
                      "organization_email": null,
                      "email": "name@domain",
                      "title": null,
                      "organization_name": null,
                      "organizational_unit_1": null,
                      "organizational_unit_2": null,
                      "organization_identifier": null,
                      "responsible_name": null,
                      "responsible_first_surname": null,
                      "responsible_second_surname": null,
                      "responsible_email": null,
                      "responsible_serial": null,
                      "responsible_position": null,
                      "subscriber_responsible_serial": null,
                      "administrative_unit": null,
                      "empowerment": null,
                      "representation": null,
                      "circumstances": null,
                      "limit": null,
                      "registration": null,
                      "process_application": null,
                      "entity_owner": null,
                      "entity_owner_serial_number": null,
                      "description": null,
                      "certificate_set": [],
                      "profile": "PFnubeAFCiudadano",
                      "scratchcard": "5082518",
                      "status": "ENROLLREADY",
                      "registering_user": {
                          "pk": 541,
                          "permission_profile": 19,
                          "registration_authority": 1,
                          "request": 29625
                      },
                      "approving_user": {
                          "pk": 541,
                          "permission_profile": 19,
                          "registration_authority": 1,
                          "request": 29625
                      },
                      "producing_user": null,
                      "registration_authority": 577,
                      "secure_element": 2,
                      "validity_time": "365",
                      "smartcard_sn": null,
                      "citizen_tax_number": null,
                      "birth_date": "02/07/1986",
                      "birth_country": null,
                      "birth_city": null,
                      "birth_province": null,
                      "birth_state": null,
                      "birth_district": null,
                      "birth_canton": null,
                      "id_document_description": null,
                      "id_document_issuer": null,
                      "organization_rol": null,
                      "professional_id_number": null,
                      "mobile_phone_number": "+34777777777",
                      "fix_phone_number": null,
                      "residence_address": null,
                      "residence_city": null,
                      "residence_province": null,
                      "residence_postal_code": null,
                      "residence_state": null,
                      "residence_district": null,
                      "residence_canton": null,
                      "organization_tax_number": null,
                      "organization_address": null,
                      "organization_city": null,
                      "organization_province": null,
                      "organization_country": null,
                      "organization_postal_code": null,
                      "organization_state": null,
                      "organization_url": null,
                      "responsible_legal_level": null,
                      "subscriber": null,
                      "responsible_legal_documents": null,
                      "special_conditions": null,
                      "responsible_registry_data": null,
                      "approving_rao": {
                          "pk": 1697,
                          "given_name": "VideoID",
                          "surname_1": "Test",
                          "surname_2": "Rao",
                          "certificate": {
                              "profile": "PFnubeAF",
                              "status": 0,
                              "valid_from": "2021-05-13T14:14:00Z",
                              "valid_to": "2023-05-13T14:14:00Z",
                              "valid": "VALID",
                              "revokation_reason": null,
                              "serial_number": "40338fee43a214b0",
                              "subject": "CN=VideoID Test Rao, 2.5.4.5=IDCES-11111111A, 2.5.4.42=VideoID, 2.5.4.4=Test Rao, C=ES",
                              "data": "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",
                              "issuer": "2.5.4.97=VATES-A66721499, CN=UANATACA CA1 DEVEL 2016, OU=AC-UANATACA, O=UANATACA S.A., L=Barcelona (see current address at www.uanataca.com/address), C=ES"
                          },
                          "id_document_number": "11111111A",
                          "id_document_description": "",
                          "id_document_issuer": "",
                          "registration_authority": [],
                          "registration_authority_master": 577,
                          "is_identificator": false
                      },
                      "producing_rao": null,
                      "id_document_number": null,
                      "id_responsible_document_type": null,
                      "id_responsible_document_country": null,
                      "id_responsible_document_number": null,
                      "organizational_unit_3": null,
                      "paperless_mode": false,
                      "videoid_mode": true,
                      "ext_recognition_data": null,
                      "complement_number": null,
                      "id_responsible_document_issuer": null,
                      "provider_registration_number": null,
                      "communication_language": "",
                      "identification_rao": null,
                      "videoid_data": {
                          "pk": 36,
                          "status": "VALIDATED",
                          "provider": 2,
                          "videoid_link": "https://api.uanataca.com/lcmpl/videoid/ZWxlY3Ryb25pY2lkOjBjd2JDaVpMYjNmRVNKQWd4UVZKWGgtempYbno3TXRMbElRRU1adGM2V19JTEUxa25lNkhuamFRdFR4aXVSS3QtQzlGd3JBZkdVNjVZQlBESG5MOXV6cnhTOXdJU2d6UzdXcEVIR1dGb1BZPToxNDQ0MDljMC04ZTgwLTQ1NTgtYWZlNy1kNmUxNjkyMDE1MDU=",
                          "requests": [
                              45013
                          ],
                          "refusal_reason": "",
                          "data": {
                              "images": {
                                  "document_photo": "",
                                  "document_front": "",
                                  "document_rear": "",
                                  "document_owner": ""
                              },
                              "security_checks": [
                                  [
                                      "OTP validation",
                                      true
                                  ],
                                  [
                                      "Data integrity",
                                      true
                                  ],
                                  [
                                      "Document is not a black and white copy",
                                      true
                                  ],
                                  [
                                      "Document not expired",
                                      true
                                  ],
                                  [
                                      "Not underage",
                                      true
                                  ],
                                  [
                                      "Liveliness detected",
                                      true
                                  ]
                              ],
                              "similarity_level": "Medium",
                              "ocr_data": {
                                  "mobile_phone_number": "+34688400127",
                                  "given_name": "NAME",
                                  "serial_number": "A9999999E",
                                  "birth_date": "01/01/1980",
                                  "surname_2": "SURNAME2",
                                  "surname_1": "SURNAME1",
                                  "id_document_type": "IDC",
                                  "id_document_validity": "31/12/2021"
                              }
                          },
                          "video_identifier": "41e696b6-94a1-4a00-b01e-4f0e9d33cfa2",
                          "validation_services": {},
                          "acceptance": {
                              "description": "User Accepted Terms and Conditions and Privacy Policy",
                              "url-doc-privacypolicy": "https://www.uanataca.com/public/pki/privacidad-PSC/",
                              "ip": "92.59.58.74",
                              "url-web-videoid": "https://api.uanataca.com/lcmpl/videoid/144409c0-8e80-4558-afe7-d6e169201505",
                              "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36 Edg/91.0.864.59",
                              "date": 1624872567147,
                              "url-doc-termsconditions": "https://www.uanataca.com/public/pki/terminos-VID/"
                          },
                          "validation_operator": {
                              "pk": 1697,
                              "given_name": "VideoID",
                              "surname_1": "Test",
                              "surname_2": "Rao",
                              "certificate": {
                                  "profile": "PFnubeAF",
                                  "status": 0,
                                  "valid_from": "2021-05-13T14:14:00Z",
                                  "valid_to": "2023-05-13T14:14:00Z",
                                  "valid": "VALID",
                                  "revokation_reason": null,
                                  "serial_number": "40338fee43a214b0",
                                  "subject": "CN=VideoID Test Rao, 2.5.4.5=IDCES-11111111A, 2.5.4.42=VideoID, 2.5.4.4=Test Rao, C=ES",
                                  "data": "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",
                                  "issuer": "2.5.4.97=VATES-A66721499, CN=UANATACA CA1 DEVEL 2016, OU=AC-UANATACA, O=UANATACA S.A., L=Barcelona (see current address at www.uanataca.com/address), C=ES"
                              },
                              "id_document_number": "11111111A",
                              "id_document_description": "",
                              "id_document_issuer": "",
                              "registration_authority": [],
                              "registration_authority_master": 577,
                              "is_identificator": false
                          }
                      }
                  }
              }
        400:
          description: Bad Request | Invalid Request id
          schema:
            type: object
            properties:
              detail:
                type: string
                description: JSON syntax error description
          examples:
            application/json:
              {
                  "detail": "JSON parse error - Expecting ',' delimiter: line 3 column 2 (char 30)"
              }
        412:
            description: Invalid Request status for validation
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: The response status code
                id:
                  type: string
                  description: The response status id
                error:
                  type: string
                  description: The response status message                
            examples:
              application/json:              
                {
                    "code": "412",
                    "id": "b49fee578381243a",
                    "error": "Invalid request status"
                }           
        500:
          description: Invalid or missing parameters | Permission denied
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "500",
                    "id": "80a9e5709417bdc9",
                    "error": "Invalid ScratchCard"
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://api.uanataca.com/api/v1/requests/25139/validate_videoid \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "username": "5012345",
                      "password": "Gy6F37xK",
                      "pin": "belorado74",
                      "rao_id": "1400"
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/requests/25139/validate_videoid"

                  payload = {
                    "username": "5012345",
                    "password": "Gy6F37xK",
                    "pin": "belorado74",
                    "rao_id": "1400"
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.post(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    `https://api.uanataca.com/api/v1/requests/25139/validate_videoid`,
                    {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        username: '5012345',
                        password: 'Gy6F37xK',
                        pin: 'belorado74',
                        rao_id: '1400'
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;

                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      using (var client = new HttpClient())
                      {
                        JObject json = JObject.Parse(@"{
                          username: '5012345',
                          password: 'Gy6F37xK',
                          pin: 'belorado74',
                          rao_id: '1400'
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PostAsync("https://api.uanataca.com/api/v1/requests/25139/validate_videoid", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
#############
  /api/v1/requests/{id_request}/refuse_videoid:
    post: 
      summary: REFUSE REQUEST
      tags:
        - External VideoID
      description: "Refuse validation for a Video ID Request"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
      - in: path
        name: id_request
        type: string
        description: The Request unique identifier
        required: true
      - in: "body"
        name: "body"
        schema:
          $ref: "#/definitions/ValidateReqObject_VID"
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            description: A JSON object with full information about the created request 
            properties:
              videoid_status:
                type: string
                description: The request status (REFUSED)
              reason:
                type: string
                description: The reason for refusal 
          examples:
            application/json:
                {
                    "videoid_status": "REFUSED",
                    "reason": "testing the API"
                }
        400:
          description: Bad Request | Invalid Request id
          schema:
            type: object
            properties:
              detail:
                type: string
                description: JSON syntax error description
          examples:
            application/json:
              {
                  "detail": "JSON parse error - Expecting ',' delimiter: line 3 column 2 (char 30)"
              }
        412:
            description: Invalid Request status for validation
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: The response status code
                id:
                  type: string
                  description: The response status id
                error:
                  type: string
                  description: The response status message                
            examples:
              application/json:              
                {
                    "code": "412",
                    "id": "b49fee578381243a",
                    "error": "Invalid request status"
                }           
        500:
          description: Invalid or missing parameters | Permission denied
          schema:
            type: object
            properties:
              code:
                type: string
                description: The response status code
              id:
                type: string
                description: The response status id
              error:
                type: string
                description: The response status message                
          examples:
            application/json:
                {
                    "code": "500",
                    "id": "80a9e5709417bdc9",
                    "error": "Invalid ScratchCard"
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://api.uanataca.com/api/v1/requests/25139/refuse_videoid \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "username": "5012345",
                      "password": "Gy6F37xK",
                      "pin": "belorado74",
                      "rao_id": "1400",
                      "reason": "Expired document"
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/requests/25139/refuse_videoid"

                  payload = {
                    "username": "5012345",
                    "password": "Gy6F37xK",
                    "pin": "belorado74",
                    "rao_id": "1400",
                    "reason": "Expired document"
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.post(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    `https://api.uanataca.com/api/v1/requests/25139/refuse_videoid`,
                    {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        username: '5012345',
                        password: 'Gy6F37xK',
                        pin: 'belorado74',
                        rao_id: '1400',
                        reason: 'Expired document'
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;

                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      using (var client = new HttpClient())
                      {
                        JObject json = JObject.Parse(@"{
                          username: '5012345',
                          password: 'Gy6F37xK',
                          pin: 'belorado74',
                          rao_id: '1400',
                          reason: 'Expired document'
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PostAsync("https://api.uanataca.com/api/v1/requests/25139/refuse_videoid", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
#############
  /api/v1/videoid/{video_pk}:
    put: 
      summary: UPLOAD DATA EVIDENCE
      tags:
        - External VideoID
      description: "Upload Request associated data"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
      - in: path
        name: video_pk
        type: string
        description: The video request pk
        required: true
      - in: "body"
        name: "body"
        schema:
          $ref: "#/definitions/UploadData_VID"
      responses:
        200:
          description: Successful Response      
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X PUT \
                    https://api.uanataca.com/api/v1/videoid/25139 \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "acceptance": {
                        "acceptance_test_data": true,
                        "another_field": 0
                      },
                      "data": {
                        "images": {
                          "document_front": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAIBAQEBAQIBAQECAgICAgQDAgICAgUEBAM (...)",
                          "document_rear": "/I7ye60+aOKS0mVGVSD9RVfyXukjmnS3cAEbpMVm6M1ncWqS3FszptO1lPRRDJ+orI8b (...)",
                          "document_photo": "AkjOOwFfHFrrNlpXxcbU9QuIIIkvR56yddgHpX3GEj1PmanmdS/xV1ySVlv/AIbXLPO (...)",
                          "document_owner": "SSVnovgCZ4Lhk+R3lJPUDJr5t/Z/wBV1DWfjRbeI75B5iQytcykc7yMEAV2/iwC0T34 (...)"
                        },
                        "ocr_data": {
                          "given_name": "Name",
                          "surname_1": "Surname",
                          "mobile_phone_number": "+34999999999",
                          "serial_number": "A9999999E"
                        },
                        "security_checks": {
                          "a_test_check": true,
                          "another_check": true
                        },
                        "similarity_level": "high"
                      }
                    }'
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/videoid/25139"

                  payload = {
                    "acceptance": {
                      "acceptance_test_data": True,
                      "another_field": 0
                    },
                    "data": {
                      "images": {
                        "document_front": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAIBAQEBAQIBAQECAgICAgQDAgICAgUEBAM (...)",
                        "document_rear": "/I7ye60+aOKS0mVGVSD9RVfyXukjmnS3cAEbpMVm6M1ncWqS3FszptO1lPRRDJ+orI8b (...)",
                        "document_photo": "AkjOOwFfHFrrNlpXxcbU9QuIIIkvR56yddgHpX3GEj1PmanmdS/xV1ySVlv/AIbXLPO (...)",
                        "document_owner": "SSVnovgCZ4Lhk+R3lJPUDJr5t/Z/wBV1DWfjRbeI75B5iQytcykc7yMEAV2/iwC0T34 (...)"
                      },
                      "ocr_data": {
                        "given_name": "Name",
                        "surname_1": "Surname",
                        "mobile_phone_number": "+34999999999",
                        "serial_number": "Y9999999E"
                      },
                      "security_checks": {
                        "a_test_check": True,
                        "another_check": True
                      },
                      "similarity_level": "high"
                    }
                  }

                  headers = {"Content-Type": "application/json"}

                  response = requests.put(url, json=payload, headers=headers)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    `https://api.uanataca.com/api/v1/videoid/25139`,
                    {
                      method: 'PUT',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        acceptance: {
                          acceptance_test_data: true,
                          another_field: 0
                        },
                        data: {
                          images: {
                            document_front: '/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAIBAQEBAQIBAQECAgICAgQDAgICAgUEBAM (...)',
                            document_rear: '/I7ye60+aOKS0mVGVSD9RVfyXukjmnS3cAEbpMVm6M1ncWqS3FszptO1lPRRDJ+orI8b (...)',
                            document_photo: 'AkjOOwFfHFrrNlpXxcbU9QuIIIkvR56yddgHpX3GEj1PmanmdS/xV1ySVlv/AIbXLPO (...)',
                            document_owner: 'SSVnovgCZ4Lhk+R3lJPUDJr5t/Z/wBV1DWfjRbeI75B5iQytcykc7yMEAV2/iwC0T34 (...)'
                          },
                          ocr_data: {
                            given_name: 'Name',
                            surname_1: 'Surname',
                            mobile_phone_number: '+34999999999',
                            serial_number: 'A9999999E'
                          },
                          security_checks: {
                            a_test_check: true,
                            another_check: true
                          },
                          similarity_level: 'high'
                        }
                      })
                    }
                  );

                  const data = await resp.json();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;
                  using System.Text;
                  using Newtonsoft.Json.Linq;

                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      using (var client = new HttpClient())
                      {
                        JObject json = JObject.Parse(@"{
                          acceptance: {
                            acceptance_test_data: true,
                            another_field: 0
                          },
                          data: {
                            images: {
                              document_front: '/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAIBAQEBAQIBAQECAgICAgQDAgICAgUEBAM (...)',
                              document_rear: '/I7ye60+aOKS0mVGVSD9RVfyXukjmnS3cAEbpMVm6M1ncWqS3FszptO1lPRRDJ+orI8b (...)',
                              document_photo: 'AkjOOwFfHFrrNlpXxcbU9QuIIIkvR56yddgHpX3GEj1PmanmdS/xV1ySVlv/AIbXLPO (...)',
                              document_owner: 'SSVnovgCZ4Lhk+R3lJPUDJr5t/Z/wBV1DWfjRbeI75B5iQytcykc7yMEAV2/iwC0T34 (...)'
                            },
                            ocr_data: {
                              given_name: 'Name',
                              surname_1: 'Surname',
                              mobile_phone_number: '+34999999999',
                              serial_number: 'A9999999E'
                            },
                            security_checks: {
                              a_test_check: true,
                              another_check: true
                            },
                            similarity_level: 'high'
                          }
                        }");
                        var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                        var request = await client.PutAsync("https://api.uanataca.com/api/v1/videoid/25139", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
#############
  /v1/upload/video/{video_identifier}:
    post: 
      summary: UPLOAD VIDEO
      tags:
        - External VideoID
      description: "Upload Request associated video"
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
      - in: path
        name: video_identifier
        type: string
        description: Unique request video identifier
        required: true
      - in: formData
        name: video
        description: The video to be uploaded
        required: true
        type: string
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              status:
                type: string
                description: Successful response status message          
          examples:
            application/json:
                {
                    "status": "200 OK"
                }
        400:
          description: Bad Request | Invalid Request id
          schema:
            type: object
            properties:
              title:
                type: string
                description: Error message title
              description:
                type: string
                description: Error message descritpion              
          examples:
            application/json:
                {
                    "title": "Upload Video Error",
                    "description": "No video file provided"
                }
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    https://lima.uanataca.com/v1/upload/video/f8402ee3844b48a1a84aff69b48b \
                    -H 'Content-Type: multipart/form-data' \
                    -F video=@sample_folder/sample_video.mp4 
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://lima.uanataca.com/v1/upload/video/f8402ee3844b48a1a84aff69b48b"

                  payload={'type': 'document_front'}
                  files=[
                    ('document',('file',open('sample_folder/sample_video.mp4','rb'),'video/png'))
                  ]
                  headers = {
                    'Content-Type': 'multipart/form-data'
                  }

                  response = requests.request("POST", url, headers=headers, data=payload, files=files)

                  print(response.text)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";
                  import FormData from "form-data";
                  import fs from "fs";

                  var formData = new FormData();

                  formData.append('type', 'document_front');
                  formData.append('document', fs.createReadStream('sample_folder/sample_video.mp4'));

                  const url = 'https://lima.uanataca.com/v1/upload/video/f8402ee3844b48a1a84aff69b48b';

                  var options = {
                    method: 'POST',
                    body: formData,
                    redirect: 'follow'
                  };

                  options.body = formData;

                  fetch(url, options)
                    .then(res => res.json())
                    .then(json => console.log(json))
                    .catch(err => console.error('error:' + err));
        - lang: 'C#'
          source: |
                  using System;
                  using System.Threading.Tasks;
                  using RestSharp;
                  using System.Security.Cryptography.X509Certificates;

                  public class Program
                  {
                    public static Task Main(string[] args)
                      {
                          X509Certificate2 clientCert = new X509Certificate2("./path_to_cert/certfile.p12", "p12passwd"); // RA authentication certificate

                          var client = new RestClient("https://lima.uanataca.com/v1/upload/video/f8402ee3844b48a1a84aff69b48b");
                          client.Timeout = -1;
                          client.RemoteCertificateValidationCallback = (sender, certificate, chain, sslPolicyErrors) => true;
                          client.ClientCertificates = new X509CertificateCollection() { clientCert };

                          string vidPath = "./path_to_video/sample_video.mp4";

                          var request = new RestRequest(Method.POST);
                          request.AlwaysMultipartFormData = true;
                          request.AddHeader("content-type", "multipart/form-data");
                          request.AddFile("video", vidPath, "video/mp4");

                          IRestResponse response = client.Execute(request);

                          Console.WriteLine(response.Content);
                          return Task.CompletedTask;
                      }
                  }      
#############
  /api/v1/download/video/{video_identifier}:
    get: 
      summary: DOWNLOAD VIDEO
      tags:
        - External VideoID
      description: "Download mp4-format binary video file associated to a Request"
      produces:
        - application/json
      parameters:
      - in: path
        name: video_identifier
        type: string
        description: The Request unique identifier
        required: true
      responses:
        200:
          description: Successful Response
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X GET \
                    https://api.uanataca.com/api/v1/download/video/25139
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://api.uanataca.com/api/v1/download/video/25139"

                  response = requests.get(url)

                  data = response.json()
                  print(data)
        - lang: 'Node.js'
          source: |
                  import fetch from "node-fetch";

                  const resp = await fetch(
                    `https://api.uanataca.com/api/v1/download/video/25139`,
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;

                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      using (var client = new HttpClient())
                      {
                        var request = await client.GetAsync("https://api.uanataca.com/api/v1/download/video/25139", null);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }         
###### definitions ######
###############################################################################
definitions:
  CreateReqObject:
    type: "object"
    required:
      - scratchcard
      - email
      - registration_authority
      - profile
    properties:
      profile:
          type: "string"
          description: "Certificate profile"
      validity_time:
          type: number
          description: "Validity time for the certificate (value in days). Values are subject to the certificate profile that is being used."
      scratchcard:
          type: "string"
          description: "Available and unused scratchcard serial number. The first unused scratchcard serial number can be obtained in the <HTML><a href='#tag/Scratchcards/paths/~1api~1v1~1scratchcards~1get_first_unused/get'>Get first unused</a></HTML> call"
      secure_element:
          type: "string"
          description: "Can be 0, 1 or 2 which stands respectively to Software, Smartcard and Cloud"
      registration_authority:
          type: "string"
          description: "The unique identifier (PK) of the RA (it's assigned when is created)"
      identification_rao:
          type: "number"
          description: "The ID of Operator in charge of identifying, this Operator has to be registered as 'Identification RAO' in the respective Registration Authority. You are able to check it through <HTML><a href='#tag/Registration-Authority-Officer/paths/~1api~1v1~1rao~1%7Bid%7D/get'>Get RAO</a></HTML> call response, explicitly in **is_identificator** field. **This field is required if the approval Operator is not the same as the identifier**"
      country_name:
          type: "string"
          description: "The country where the RA is registered"
      serial_number:
          type: "string"
          description: "The user's document serial number"
      id_document_country:
          type: "string"
          description: The user's id document country two-letters code (ISO 3166-1 alpha-2)
      id_document_type:
          type: "string"
          description: The user's document type
      given_name:
          type: "string"
          description: The user's given name
      surname_1:
          type: "string"
          description: The user's first surname
      surname_2:
          type: "string"
          description: The user's second surname
      email:
          type: "string"
          description: The user's email
      mobile_phone_number:
          type: "string" 
          description: The user's mobile phone number
      paperless_mode:
          type: "number"
          description: This parameter must be included and set to 1 for a classic certificate request
      videoid_mode:
          type: "number"
          description: This parameter must be included and set to 1 for a Video ID certificate request
      webhook_url:
          type: "string"
          description: "The webhook associated URL. </br>
                          <blockquote style='background-color: #faf3ac; border-color: #5a5a5a; color: #3b3b3b;'><b>⚠ Not required for external authentication. See <a href='#section/Webhook-Configuration'>Webhook Configuration</a> section</b></blockquote>"     
###########
  UpdateReqObject:
    type: "object"
    required:
      - scratchcard
      - email
      - registration_authority
      - profile
      - country_name
    properties:
      profile:
          type: "string"
          description: "Certificate profile"
      scratchcard:
          type: "string"
          description: "Available and unused scratchcard serial number. The first unused scratcard serial number can be obtained in the <HTML><a href='#tag/Scratchcards/paths/~1api~1v1~1scratchcards~1get_first_unused/get'>Get first unused</a></HTML> call"
      secure_element:
          type: "string"
          description: "Can be 0, 1 or 2 which stands respectively to Software, Smartcard and Cloud"
      registration_authority:
          type: "string"
          description: "The unique identifier (PK) of the RA (it's assigned when is created)"
      country_name:
          type: "string"
          description: "The country where the RA is registered"
      serial_number:
          type: "string"
          description: "The user's document serial number"
      id_document_country:
          type: "string"
          description: The user's id document country two-letters code (ISO 3166-1 alpha-2)
      id_document_type:
          type: "string"
          description: The user's document type
      given_name:
          type: "string"
          description: The user's given name
      surname_1:
          type: "string"
          description: The user's first surname
      surname_2:
          type: "string"
          description: The user's second surname
      email:
          type: "string"
          description: The user's email
      mobile_phone_number:
          type: "string" 
          description: The user's mobile phone number
      paperless_mode:
          type: "number"
          description: This parameter must be included and set to 1 for a classic certificate request
      videoid_mode:
          type: "number"
          description: This parameter must be included and set to 1 for a Video ID certificate request  
###########
  TBSObject:
    type: "object"
    required:
      - rao
      - type
    properties:
      rao:
          type: "string"
          description: "The unique identifier of the RAO that will sign and approve the request"
      type:
          type: "string"
          enum: [APPROVE]
          description: "The type of the receipt to generate"
###########
  ContractObject:
    type: "object"
    properties:
      doctype:
          type: "string"
          enum: [contract, contract_renew]
          description: "The contract type"
###########
  ApproveReqObject:
    type: "object"
    properties:
      rao:
          type: "string"
          description: "The unique identifier of the RAO that will sign and approve the request"
      receipt:
          type: "string"
          description: "The signed receipt as a Base64 formatted string"
###########
  CloudEnrObject:
    type: "object"
    properties:
      scratchcard:
          type: "string"
          description: "The scratchcard number of the request to be enrolled"
      erc:
          type: "string"
          description: "The enrollment code associated to the scratchcard"
      pin:
          type: "string"
          description: "A new PIN code to assign. Must contain at least 2 letters, 2 numbers and must be at least 8 characters long"
      puk:
          type: "string"
          description: "A new puk to assign. Must contain at least 2 letters, 2 numbers and must be at least 8 characters long"
###########
  SoftEnrObject:  
    type: "object"
    properties:
      scratchcard:
          type: "string"
          description: "The scratchcard number of the request to be enrolled"
      enrollment_code:
          type: "string"
          description: "The enrollment code associated to the scratchcard"

###########
  PlApproveReqObject:
    type: "object"
    required:
      - username
      - password
      - pin
      - rao_id
    properties:
      username:
          type: "string"
          description: "The RAO's username"
      password:
          type: "string"
          description: "The RAO's password"
      pin:
          type: "string"
          description: "The RAO's PIN"
      rao_id:
          type: "string"
          description: "The RAO's id"
      lang:
          type: "string"
          description: "The contract language"
###########
  PlCloudEnrObject:
    type: "object"
    properties:
      secret:
          type: "string"
          description: "The OTP code sent to the client via SMS"
      pin:
          type: "string"
          description: "The PIN code created by the client (must contain at least 2 letters, 2 numbers and must be at least 8 characters long)"
###########
  PlSoftEnrObject:
    type: "object"
    properties:
      secret:
          type: "string"
          description: "The OTP code sent to the client via SMS"
      p12password:
          type: "string"
          description: "The PIN code created by the client (must contain at least 2 letters, 2 numbers and must be at least 8 characters long)"
###########
  GenOTPObject:
    type: "object"
    properties:
      scratchcard:
          type: "string"
          description: "The scratchcard serial number"    
###########
  GenOTPforQS:
    type: "object"
    properties:
      pin:
          type: "string"
          description: "The PIN code created by the client (must contain at least 2 letters, 2 numbers and must be at least 8 characters long)"
      puk:
          type: "string"
          description: "The PUK code created by the client (must contain at least 2 letters, 2 numbers and must be at least 8 characters long)"          
###########
  CreateScrObject:
    type: "object"
    properties:
      sn:
          type: "string"
          description: "The scratchcard serial number"
      registration_authority:
          type: "string"
          description: "The registration authority id"
      secret:
          type: "object"
          properties:
              erc:
                  type: "string"
                  description: "Security code used for recovery or revocation purpose"
              enrollment_code:
                  type: "string"
                  description: "Security code requested for different operations (like certificate enrollment)"
              pin:
                  type: "string"
                  description: "Default pin assigned to the scratchcard. This will be changed in the enrollment phase."
              puk:
                  type: "string"
                  description: "Default puk assigned to the scratchcard. This will be changed in the enrollment phase."
###########
  UpdScrObject:
    type: "object"
    properties:
      sn:
          type: "string"
          description: "The scratchcard serial number  "
      registration_authority:
          type: "string"
          description: "The registration authority id"
      secret:
          type: "object"
          properties:
              erc:
                  type: "object"
                  properties:
                      erc:
                          type: "string"
                          description: "Security code used for recovery or revocation purpose"
                      enrollment_code:
                          type: "string"
                          description: "Security code requested for different operations (like certificate enrollment)"
                      pin:
                          type: "string"
                          description: "Default PIN assigned to the scratchcard. This will be changed in the enrollment phase."
                      puk:
                          type: "string"
                          description: "Default PUK assigned to the scratchcard. This will be changed in the enrollment phase."
###########
  FUScrObject:
    type: "object"
    properties:
      ra:
          type: "string"
          description: "The registration authority id"
###########
  IUScrObject:
    type: "object"
    properties:
      sn:
          type: "string"
          description: "The scratchcard id number"
###########
  REVScrObject:
    type: "object"
    required:
        - scratchcard
        - erc
        - reason
    properties:
      scratchcard:
          type: "string"
          description: "The scratchcard id number"
      erc:
          type: "string"
          description: "The scratchcard revocation code"
      reason:
          type: "string"
          enum: [UNSPECIFIED, KEYCOMPROMISE, AFFILIATIONCHANGED, SUPERSEDED, CESSATIONOFOPERATION, PRIVILEGESWITHDRAWN, CERTIFICATEHOLD, NOT_REVOKED]
          description: >
            The reason associated to the scratchcard revocation:
             * **UNSPECIFIED** - Unspecified reason
             * **KEYCOMPROMISE** - Compromised keys
             * **AFFILIATIONCHANGED** - Affiliation changed
             * **SUPERSEDED** - Superseded
             * **CESSATIONOFOPERATION** - Ceased
             * **PRIVILEGESWITHDRAWN** - Privileges withdrawn
             
            The reason to suspend or activate a certificate when this is suspended:
             * **CERTIFICATEHOLD** - Suspend a certificate
             * **NOT_REVOKED** - Activate a certificate that was suspended
             
###########
  WhoScrObject:
    type: "object"
    required:
      - scratchcard
      - erc
    properties:
      scratchcard:
          type: "string"
          description: "The scratchcard id number"
      erc:
          type: "string"
          description: "The scratchcard enrollment code (password for accessing Uanataca services)"    
###########
  MoveScrObject:
    type: "object"
    required:
        - from_ra
        - to_ra
        - amount
        - from_sn
        - to_sn
    properties:
      from_ra:
          type: "string"
          description: 'The source RA id that will give the scratchcards </br>
          <blockquote style="background-color: #faf3ac; border-color: #5a5a5a; color: #3b3b3b;"><b>⚠ If from_ra/to_ra is used, from_sn/to_sn cannot be used</b></blockquote>'
      to_ra:
          type: "string"
          description: 'The destination RA id that will receive the scratchcards </br>
          <blockquote style="background-color: #faf3ac; border-color: #5a5a5a; color: #3b3b3b;"><b>⚠ If from_ra/to_ra is used, from_sn/to_sn cannot be used</b></blockquote>'
      amount:
          type: "string"
          description: "The amount of scratchcards to be transferred" 
      from_sn:
          type: "string"
          description: 'The scratchcard starting id </br>
          <blockquote style="background-color: #faf3ac; border-color: #5a5a5a; color: #3b3b3b;"><b>⚠ If from_sn/to_sn is used, from_ra/to_ra cannot be used</b></blockquote>'
      to_sn:
          type: "string"
          description: 'The scratchcard ending id </br>
          <blockquote style="background-color: #faf3ac; border-color: #5a5a5a; color: #3b3b3b;"><b>⚠ If from_sn/to_sn is used, from_ra/to_ra cannot be used</b></blockquote>'
###########
  IsRenScrObject:
    type: "object"
    properties:
      scratchcard:
          type: "string"
          description: "The scratchcard number of the request"
      erc:
          type: "string"
          description: "The scratchcard enrollment code of the request"
###########
  ClRenScrObject:
    type: "object"
    properties:
      username:
          type: "string"
          description: "The username associated to the request to be renewed"
      password:
          type: "string"
          description: "The password associated to the request to be renewed"
      pin:
          type: "string"
          description: "The PIN associated to the request to be renewed"
###########
  SoRenScrObject:
    type: "object"
    properties:
      username:
          type: "string"
          description: "The username associated to the request to be renewed"
      password:
          type: "string"
          description: "The password associated to the request to be renewed"
      pin:
          type: "string"
          description: "The PIN associated to the request to be renewed"
###########
  ResetPinObject:
    type: "object"
    properties:
      scratchcard:
          type: "string"
          description: "The scratchcard number (username) associated to the request"
      enrollment_code:
          type: "string"
          description: "The scratchcard enrollment code of the request"
      newpin:
          type: "string"
          description: "The new pin"
      otp:
          type: "string"
          description: "The OTP code sent to the user via SMS"            
###########
  CreateRAObject:
    type: "object"
    required:
      - name
      - parent
    properties:
      name:
          type: "string"
          description: "The RA name"
      parent:
          type: "string"
          description: "The RA parent unique id"
      enabled_from:
          type: "string"
          description: "The date when the RA will be enabled from (the format is YYYY-MM-DD)" 
      enabled_until:
          type: "string"
          description: "The date when the RA will be no longer enabled (the format is YYYY-MM-DD)" 
      organization_tax_number:
          type: "string"
          description: "The tax number of the organization"
      organization_name:
          type: "string"
          description: "The organization name"
      responsible_name:
          type: "string"
          description: "The RA responsible given name"
      responsible_first_surname:
          type: "string"
          description: "The RA responsible first surname"
      responsible_second_surname:
          type: "string"
          description: "The RA responsible second surname" 
      responsible_serial:
          type: "string"
          description: "The RA responsible serial number" 
      email:
          type: "string"
          description: "A valid email address"
      fix_phone_number:
          type: "string"
          description: "A mobile phone number"
      address:
          type: "string"
          description: "The city address" 
      city:
          type: "string"
          description: "The city where the RA is located" 
      postal_code:
          type: "string"
          description: "The postal code of the city where the RA is located"
      province:
          type: "string"
          description: "The province of the city where the RA is located"
      url:
          type: "string"
          description: "A web url of the RA" 
      country:
          type: "string"
          description: "The country where the RA is located"
      enable_external_auth:
          type: "boolean"
          description: "VideoID external authentication mode enabling/disabling check"
      videoid_enabled:
          type: "boolean"
          description: "VideoID enabling/disabling check"
      videoid_provider:
          type: "integer"
          description: "VideoID provider indicator"
###########
  UpdateRAObject:
    type: "object"
    required:
      - name
      - parent
    properties:
      name:
          type: "string"
          description: "The RA name"
      parent:
          type: "string"
          description: "The RA parent unique id"
      enabled_from:
          type: "string"
          description: "The date when the RA will be enabled from (the format is YYYY-MM-DD)" 
      enabled_until:
          type: "string"
          description: "The date when the RA will be no longer enabled (the format is YYYY-MM-DD)" 
      organization_tax_number:
          type: "string"
          description: "The tax number of the organization"
      organization_name:
          type: "string"
          description: "The organization name"
      responsible_name:
          type: "string"
          description: "The RA responsible given name"
      responsible_first_surname:
          type: "string"
          description: "The RA responsible first surname"
      responsible_second_surname:
          type: "string"
          description: "The RA responsible second surname" 
      responsible_serial:
          type: "string"
          description: "The RA responsible serial number" 
      email:
          type: "string"
          description: "A valid email address"
      fix_phone_number:
          type: "string"
          description: "A mobile phone number"
      address:
          type: "string"
          description: "The city address" 
      city:
          type: "string"
          description: "The city where the RA is located" 
      postal_code:
          type: "string"
          description: "The postal code of the city where the RA is located"
      province:
          type: "string"
          description: "The province of the city where the RA is located"
      url:
          type: "string"
          description: "A web url of the RA" 
      country:
          type: "string"
          description: "The country where the RA is located"
      enable_external_auth:
          type: "boolean"
          description: "VideoID external authentication mode enabling/disabling check"
      videoid_enabled:
          type: "boolean"
          description: "VideoID enabling/disabling check"
      videoid_provider:
          type: "integer"
          description: "VideoID provider indicator"
###########
  UpdateRAOObject:
    type: "object"
    required:
        - registration_authority_master
        - registration_authority
        - certificate
        - given_name
        - surname_1
    properties:
      registration_authority_master:
          type: "string"
          description: "The registration authority master id"
      registration_authority:
          type: "string"
          description: "The list of the RAs where the RAO can operate	"
      certificate:
          type: "string"
          description: "The Request certificate in Base64 format"
      given_name:
          type: "string"
          description: "The RAO's name"
      surname_1:
          type: "string"
          description: "The RAO's first surname"
      surname_2:
          type: "string"
          description: "The RAO's second surname"
      id_document_number:
          type: "string"
          description: "The RAO's document number"
      id_document_issuer:
          type: "string"
          description: "The document issuer"
      email:
          type: "string"
          description: "A valid email address" 
###########
  CreateUserObject:
    type: "object"
    required:
        - registration_authority
        - permission_profile
        - request
        - rao
    properties:
      registration_authority:
          type: "string"
          description: "The registration authority id"
      permission_profile:
          type: "string"
          description: "The permission profile id that will be associated to this user"
      request:
          type: "string"
          description: "The request id"
      rao:
          type: "string"
          description: "The RAO id"
###########
  UpdateUserObject:
    type: "object"
    required:
        - registration_authority
    properties:
      registration_authority:
          type: "string"
          description: "The registration authority id"
      permission_profile:
          type: "string"
          description: "The permission profile id that will be associated to this user"
      request:
          type: "string"
          description: "The request id"
      rao:
          type: "string"
          description: "The RAO id"
###########
  ValidateReqObject_VID:
    type: "object"
    required:
        - username
        - password
        - pin
        - rao_id
    properties:
      username:
          type: "string"
          description: "The RAO's username"
      password:
          type: "string"
          description: "The RAO's password"
      pin:
          type: "string"
          description: "The RAO's pin"
      rao_id:
          type: "string"
          description: "The RAO's id" 
###########
  RefuseReqObject_VID:
    type: "object"
    required:
        - username
        - password
        - pin
        - rao_id
    properties:
      username:
          type: "string"
          description: "The RAO's username"
      password:
          type: "string"
          description: "The RAO's password"
      pin:
          type: "string"
          description: "The RAO's pin"
      rao_id:
          type: "string"
          description: "The RAO's id"
      reason:
          type: "string"
          description: "Reason that caused VideoID refusal"
###########
  UploadData_VID:
    type: "object"
    properties:
        acceptance:
          type: "object"
          description: "A set of acceptance parameters. </br> 
                        <blockquote style='background-color: #faf3ac; border-color: #5a5a5a; color: #3b3b3b;'><b>⚠ Customizable object for external authentication.</b></blockquote>"
          properties:
            description:
              type: "string"
              description: "Terms and Conditions descriptive text"
            url-doc-privacypolicy:
              type: "string"
              description: "Privacy policy document URL"
            ip:
              type: "string"
              description: "The local IP adress"
            url-web-videoid:
              type: "string"
              description: "Video ID platform access URL"
            user-agent:
              type: "string"
              description: "A user agent (e.g. web browser)"
            date:
              type: "string"
              description: "The current date"
            url-doc-termsconditions:
              type: "string"
              description: "Terms and conditions document URL"
        videoid_data:
          type: "object"
          description: "Data to upload for Video ID
                        <blockquote style='background-color: #faf3ac; border-color: #5a5a5a; color: #3b3b3b;'><b>⚠ Customizable object for external authentication.</b></blockquote>"
          properties:
            images:
              type: "object"
              description: Document images
              properties:
                document_front:
                  type: "string"
                  description: Base64 document front image
                document_rear:
                  type: string
                  description: Base64 document rear image
                document_photo:
                  type: string
                  description: Base64 document client picture (extracted from document)
                document_owner:
                  type: string
                  description: Base64 client selfie
            ocr_data:
              type: "object"
              description: "Optical Character Recognition result
                           <blockquote style='background-color: #faf3ac; border-color: #5a5a5a; color: #3b3b3b;'><b>⚠ Customizable object for external authentication.</b></blockquote>"
              properties:
                given_name:
                  type: string
                  description: The user's given name
                surname_1:
                  type: string
                  description: The user's first surname
                surname_2:
                  type: string
                  description: The user's second surname              
                mobile_phone_number:
                  type: string
                  description: The user's mobile phone number
                email:
                  type: string
                  description: The user's email
                serial_number:
                  type: string
                  description: The user's document serial number
                id_document_type:
                  type: string
                  enum: [IDC, PAS, PNO, TIN]
                  description: "Document types allowed for user identification: \n
                    - **IDC** - Identification based on national identity card number \n
                    - **PAS** - Identification based on passport number \n
                    - **PNO** - Identification based on national personal number (national civic registration number) \n
                    - **TIN** - Tax Identification Number according to the European Commission"
                id_document_country:
                  type: string
                  description: The user's id document country two-letters code (ISO 3166-1 alpha-2)            
            security_checks:
              type: "object"
              description: "Security checks related to document integrity
                           <blockquote style='background-color: #faf3ac; border-color: #5a5a5a; color: #3b3b3b;'><b>⚠ Customizable object for external authentication.</b></blockquote>"
              properties:
                otp_validation:
                  type: boolean
                  description: OTP code validation check
                documents_match:
                  type: boolean
                  description: Documents matching official registers check
                data_integrity:
                  type: boolean
                  description: Document data is not corrupted check
                document_notcopy:
                  type: boolean
                  description: Document is not a copy check
                document_notexpired:
                  type: boolean
                  description: Document is not expired check
                document_notunderage:
                  type: boolean
                  description: The user is not underage check
                liveliness:
                  type: boolean
                  description: The user is real check
            similarity_level:
              type: integer
              description: Level of similarity between document picture and face selfie. Ranges in [0,100].  
         